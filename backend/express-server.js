const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 8081;

// Middleware
app.use(cors());
app.use(express.json());

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockPosts = [
  {
    id: "1",
    description: "–î–ü–° –ø–æ—Å—Ç –Ω–∞ —Ç—Ä–∞—Å—Å–µ",
    latitude: 59.3733,
    longitude: 28.6139,
    address: "–ö–∏–Ω–≥–∏—Å–µ–ø–ø, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    timestamp: Date.now(),
    expiresAt: Date.now() + 4 * 60 * 60 * 1000,
    userId: "user1",
    userName: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    type: "dps",
    severity: "medium",
    likes: 0,
    isApproved: true,
  }
];

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    version: "1.0.1",
    message: "Express server is running",
    nodeVersion: process.version,
    platform: process.platform
  });
});

// API –¥–ª—è –ø–æ—Å—Ç–æ–≤
app.get('/api/posts', (req, res) => {
  try {
    const now = Date.now();
    const activePosts = mockPosts.filter(post => post.expiresAt > now);
    res.json({ success: true, data: activePosts });
  } catch (error) {
    console.error('Error fetching posts:', error);
    res.status(500).json({ success: false, error: 'Failed to fetch posts' });
  }
});

app.post('/api/posts', (req, res) => {
  try {
    const body = req.body;
    const newPost = {
      id: Date.now().toString(),
      description: body.description || "–ù–æ–≤—ã–π –ø–æ—Å—Ç",
      latitude: body.latitude || 59.3733,
      longitude: body.longitude || 28.6139,
      address: body.address || "–ö–∏–Ω–≥–∏—Å–µ–ø–ø",
      timestamp: Date.now(),
      expiresAt: Date.now() + 4 * 60 * 60 * 1000,
      userId: body.userId || "anonymous",
      userName: body.userName || "Anonymous",
      type: body.type || "dps",
      severity: body.severity || "medium",
      likes: 0,
      isApproved: true,
    };
    
    mockPosts.push(newPost);
    res.json({ success: true, data: newPost });
  } catch (error) {
    console.error('Error creating post:', error);
    res.status(500).json({ success: false, error: 'Failed to create post' });
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
if (process.env.NODE_ENV === "production") {
  const distPath = path.join(__dirname, '..', 'dist');
  
  if (fs.existsSync(distPath)) {
    console.log("Serving static files from ./dist");
    app.use(express.static(distPath));
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('*', (req, res) => {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>–î–ü–° –ö–∏–Ω–≥–∏—Å–µ–ø–ø</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <style>
        body { 
          font-family: Arial, sans-serif; 
          margin: 0; 
          padding: 40px; 
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
        }
        .container { 
          background: white; 
          padding: 40px; 
          border-radius: 15px; 
          box-shadow: 0 10px 30px rgba(0,0,0,0.2);
          max-width: 600px;
          margin: 0 auto;
        }
        h1 { 
          color: #007AFF; 
          text-align: center;
          margin-bottom: 30px;
        }
        .status { 
          color: green; 
          font-weight: bold; 
          font-size: 18px;
          text-align: center;
          margin: 20px 0;
        }
        .info {
          background: #f8f9fa;
          padding: 20px;
          border-radius: 10px;
          margin: 20px 0;
        }
        .link {
          display: inline-block;
          background: #007AFF;
          color: white;
          padding: 10px 20px;
          text-decoration: none;
          border-radius: 5px;
          margin: 10px 5px;
        }
        .link:hover {
          background: #0056b3;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöÄ –î–ü–° –ö–∏–Ω–≥–∏—Å–µ–ø–ø</h1>
        <p class="status">‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
        
        <div class="info">
          <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
          <p><strong>Node.js –≤–µ—Ä—Å–∏—è:</strong> ${process.version}</p>
          <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${process.platform}</p>
          <p><strong>–†–µ–∂–∏–º:</strong> ${process.env.NODE_ENV || 'development'}</p>
        </div>
        
        <div style="text-align: center;">
          <a href="/api/health" class="link">üîç Health Check</a>
          <a href="/api/posts" class="link">üìã API Posts</a>
        </div>
        
        <div class="info">
          <h3>üì± –ì–æ—Ç–æ–≤–æ –¥–ª—è Telegram WebApp</h3>
          <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Telegram Mini Apps.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  res.send(html);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).json({ 
    success: false, 
    error: 'Internal server error',
    details: err.message 
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
console.log(`üöÄ Express server starting on port ${port}`);
console.log(`üì± Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß Node.js version: ${process.version}`);

app.listen(port, '0.0.0.0', () => {
  console.log(`‚úÖ Express server running at http://localhost:${port}`);
  console.log(`üîó Health check: http://localhost:${port}/api/health`);
  console.log(`üåê Main page: http://localhost:${port}/`);
});
