/**
 * üîå WEBSOCKET –°–ï–†–í–ï–† –î–õ–Ø REAL-TIME –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
 * - Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ì–µofencing
 * - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
 * - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
 */

import { WebSocketServer, WebSocket } from 'ws';
import { IncomingMessage } from 'http';
import { URL } from 'url';
import { prisma } from '../lib/prisma';

// –¢–∏–ø—ã –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
export interface WebSocketMessage {
  type: 'notification' | 'post_update' | 'user_update' | 'system' | 'ping' | 'pong' | 'geofence_alert';
  data: any;
  timestamp: number;
  userId?: string;
  postId?: string;
  targetUsers?: string[]; // –î–ª—è —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

export interface ConnectedUser {
  id: string;
  ws: WebSocket;
  lastPing: number;
  location?: {
    latitude: number;
    longitude: number;
    accuracy: number;
  };
  subscriptions: {
    notifications: boolean;
    geofencing: boolean;
    postUpdates: boolean;
  };
  isAlive: boolean;
}

export interface GeofenceAlert {
  userId: string;
  postId: string;
  distance: number;
  postType: string;
  severity: string;
  location: {
    latitude: number;
    longitude: number;
  };
}

export class WebSocketManager {
  private static instance: WebSocketManager;
  private wss: WebSocketServer | null = null;
  private connectedUsers: Map<string, ConnectedUser> = new Map();
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private geofenceCheckInterval: NodeJS.Timeout | null = null;
  private readonly HEARTBEAT_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private readonly GEOFENCE_CHECK_INTERVAL = 10000; // 10 —Å–µ–∫—É–Ω–¥
  private readonly PING_TIMEOUT = 60000; // 60 —Å–µ–∫—É–Ω–¥

  public static getInstance(): WebSocketManager {
    if (!WebSocketManager.instance) {
      WebSocketManager.instance = new WebSocketManager();
    }
    return WebSocketManager.instance;
  }

  /**
   * –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  public start(server: any, port: number = 8080): void {
    console.log('üîå Starting WebSocket server...');

    this.wss = new WebSocketServer({ 
      server,
      path: '/ws',
      perMessageDeflate: {
        zlibDeflateOptions: {
          level: 3,
          memLevel: 7,
        },
        zlibInflateOptions: {
          level: 3,
          memLevel: 7,
        },
        threshold: 1024,
        concurrencyLimit: 10,
      }
    });

    this.wss.on('connection', this.handleConnection.bind(this));
    this.wss.on('error', this.handleError.bind(this));

    // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.startHeartbeat();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–µofencing
    this.startGeofenceCheck();

    console.log(`‚úÖ WebSocket server started on port ${port}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private handleConnection(ws: WebSocket, request: IncomingMessage): void {
    try {
      const url = new URL(request.url || '', `http://${request.headers.host}`);
      const userId = url.searchParams.get('userId');
      const token = url.searchParams.get('token');

      if (!userId) {
        console.log('‚ùå WebSocket connection rejected: no userId');
        ws.close(1008, 'User ID required');
        return;
      }

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JWT)
      if (!token || token !== userId) {
        console.log('‚ùå WebSocket connection rejected: invalid token');
        ws.close(1008, 'Invalid token');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
      const user: ConnectedUser = {
        id: userId,
        ws,
        lastPing: Date.now(),
        subscriptions: {
          notifications: true,
          geofencing: true,
          postUpdates: true,
        },
        isAlive: true,
      };

      this.connectedUsers.set(userId, user);

      console.log(`üîå User ${userId} connected. Total users: ${this.connectedUsers.size}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.sendMessage(userId, {
        type: 'system',
        data: {
          message: 'WebSocket connection established',
          serverTime: Date.now(),
          features: ['notifications', 'geofencing', 'post_updates']
        },
        timestamp: Date.now(),
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebSocket
      ws.on('message', (data) => this.handleMessage(userId, data));
      ws.on('close', () => this.handleDisconnection(userId));
      ws.on('error', (error) => this.handleUserError(userId, error));
      ws.on('pong', () => this.handlePong(userId));

    } catch (error) {
      console.error('‚ùå Error handling WebSocket connection:', error);
      ws.close(1011, 'Internal server error');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private handleMessage(userId: string, data: Buffer): void {
    try {
      const message: WebSocketMessage = JSON.parse(data.toString());
      
      switch (message.type) {
        case 'ping':
          this.handlePing(userId);
          break;
        case 'location_update':
          this.handleLocationUpdate(userId, message.data);
          break;
        case 'subscription_update':
          this.handleSubscriptionUpdate(userId, message.data);
          break;
        default:
          console.log(`‚ùì Unknown message type from ${userId}:`, message.type);
      }
    } catch (error) {
      console.error(`‚ùå Error parsing message from ${userId}:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private handlePing(userId: string): void {
    const user = this.connectedUsers.get(userId);
    if (user) {
      user.lastPing = Date.now();
      this.sendMessage(userId, {
        type: 'pong',
        data: { timestamp: Date.now() },
        timestamp: Date.now(),
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ pong —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private handlePong(userId: string): void {
    const user = this.connectedUsers.get(userId);
    if (user) {
      user.lastPing = Date.now();
      user.isAlive = true;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
   */
  private handleLocationUpdate(userId: string, locationData: any): void {
    const user = this.connectedUsers.get(userId);
    if (user) {
      user.location = {
        latitude: locationData.latitude,
        longitude: locationData.longitude,
        accuracy: locationData.accuracy || 100,
      };
      console.log(`üìç Location updated for user ${userId}:`, user.location);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
   */
  private handleSubscriptionUpdate(userId: string, subscriptionData: any): void {
    const user = this.connectedUsers.get(userId);
    if (user) {
      user.subscriptions = { ...user.subscriptions, ...subscriptionData };
      console.log(`üìã Subscriptions updated for user ${userId}:`, user.subscriptions);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private handleDisconnection(userId: string): void {
    this.connectedUsers.delete(userId);
    console.log(`üîå User ${userId} disconnected. Total users: ${this.connectedUsers.size}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private handleUserError(userId: string, error: Error): void {
    console.error(`‚ùå WebSocket error for user ${userId}:`, error);
    this.connectedUsers.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  private handleError(error: Error): void {
    console.error('‚ùå WebSocket server error:', error);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  public sendMessage(userId: string, message: WebSocketMessage): boolean {
    const user = this.connectedUsers.get(userId);
    if (!user || user.ws.readyState !== WebSocket.OPEN) {
      return false;
    }

    try {
      user.ws.send(JSON.stringify(message));
      return true;
    } catch (error) {
      console.error(`‚ùå Error sending message to ${userId}:`, error);
      this.connectedUsers.delete(userId);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  public broadcastMessage(message: WebSocketMessage, excludeUsers: string[] = []): number {
    let sentCount = 0;
    
    for (const [userId, user] of this.connectedUsers) {
      if (excludeUsers.includes(userId)) continue;
      
      if (this.sendMessage(userId, message)) {
        sentCount++;
      }
    }

    console.log(`üì¢ Broadcast message sent to ${sentCount} users`);
    return sentCount;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
   */
  public async notifyNewPost(post: any): Promise<void> {
    const message: WebSocketMessage = {
      type: 'post_update',
      data: {
        action: 'create',
        post: {
          id: post.id,
          type: post.type,
          severity: post.severity,
          description: post.description,
          latitude: post.latitude,
          longitude: post.longitude,
          address: post.address,
          timestamp: post.timestamp,
          userName: post.userName,
        }
      },
      timestamp: Date.now(),
      postId: post.id,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    for (const [userId, user] of this.connectedUsers) {
      if (user.subscriptions.postUpdates) {
        this.sendMessage(userId, {
          ...message,
          type: 'notification',
          data: {
            notificationType: 'new_post',
            title: `–ù–æ–≤—ã–π –ø–æ—Å—Ç: ${post.type}`,
            message: post.description,
            priority: post.severity === 'high' ? 'high' : 'normal',
            data: message.data,
          }
        });
      }
    }

    console.log(`üì¢ New post notification sent for post ${post.id}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
   */
  public async notifyPostApproval(postId: string, userId: string): Promise<void> {
    this.sendMessage(userId, {
      type: 'notification',
      data: {
        notificationType: 'post_approved',
        title: '–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω',
        message: '–í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
        priority: 'normal',
        data: { postId }
      },
      timestamp: Date.now(),
      postId,
      targetUsers: [userId],
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
   */
  public async notifyPostRejection(postId: string, userId: string, reason: string): Promise<void> {
    this.sendMessage(userId, {
      type: 'notification',
      data: {
        notificationType: 'post_rejected',
        title: '–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω',
        message: `–í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${reason}`,
        priority: 'normal',
        data: { postId, reason }
      },
      timestamp: Date.now(),
      postId,
      targetUsers: [userId],
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private startHeartbeat(): void {
    this.heartbeatInterval = setInterval(() => {
      const now = Date.now();
      
      for (const [userId, user] of this.connectedUsers) {
        if (now - user.lastPing > this.PING_TIMEOUT) {
          console.log(`üíî User ${userId} timed out, closing connection`);
          user.ws.terminate();
          this.connectedUsers.delete(userId);
        } else {
          user.ws.ping();
        }
      }
    }, this.HEARTBEAT_INTERVAL);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µofencing
   */
  private startGeofenceCheck(): void {
    this.geofenceCheckInterval = setInterval(async () => {
      await this.checkGeofencing();
    }, this.GEOFENCE_CHECK_INTERVAL);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µofencing –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async checkGeofencing(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Prisma
      if (!prisma) {
        return; // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const activePosts = await prisma.post.findMany({
        where: {
          expiresAt: { gt: Date.now() },
          needsModeration: false,
        },
        select: {
          id: true,
          latitude: true,
          longitude: true,
          type: true,
          severity: true,
          description: true,
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const [userId, user] of this.connectedUsers) {
        if (!user.subscriptions.geofencing || !user.location) continue;

        for (const post of activePosts) {
          const distance = this.calculateDistance(
            user.location.latitude,
            user.location.longitude,
            post.latitude,
            post.longitude
          );

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ 2–∫–º –æ—Ç –ø–æ—Å—Ç–∞
          if (distance <= 2000) {
            await this.sendGeofenceAlert(userId, post, distance);
          }
        }
      }
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≥–µofencing –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      if (process.env.NODE_ENV === 'development') {
        return;
      }
      console.error('‚ùå Error checking geofencing:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µofencing —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendGeofenceAlert(userId: string, post: any, distance: number): Promise<void> {
    const message: WebSocketMessage = {
      type: 'geofence_alert',
      data: {
        postId: post.id,
        postType: post.type,
        severity: post.severity,
        description: post.description,
        distance: Math.round(distance),
        location: {
          latitude: post.latitude,
          longitude: post.longitude,
        }
      },
      timestamp: Date.now(),
      postId: post.id,
      targetUsers: [userId],
    };

    this.sendMessage(userId, {
      ...message,
      type: 'notification',
      data: {
        notificationType: 'geofence',
        title: `–î–ü–° –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ (${Math.round(distance)}–º)`,
        message: `${post.type}: ${post.description}`,
        priority: post.severity === 'high' ? 'high' : 'normal',
        data: message.data,
      }
    });
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –º–µ—Ç—Ä–∞—Ö)
   */
  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = this.toRadians(lat2 - lat1);
    const dLon = this.toRadians(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
   */
  private toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
   */
  public getStats(): any {
    return {
      connectedUsers: this.connectedUsers.size,
      users: Array.from(this.connectedUsers.keys()),
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  public stop(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
    }
    if (this.geofenceCheckInterval) {
      clearInterval(this.geofenceCheckInterval);
    }
    if (this.wss) {
      this.wss.close();
    }
    console.log('üîå WebSocket server stopped');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const wsManager = WebSocketManager.getInstance();
