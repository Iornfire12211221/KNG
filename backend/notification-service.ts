/**
 * üì± –°–ï–†–í–ò–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –î–ü–°
 */

import { prisma } from '../lib/prisma';
import { telegramBot, TelegramNotification } from './telegram-bot';
import { WebSocketManager } from './websocket-server';

export interface NotificationSettings {
  enabled: boolean;
  sendToTelegram: boolean;
  sendToWebSocket: boolean;
  minSeverity: 'low' | 'medium' | 'high' | 'critical';
  types: string[];
  cooldownMinutes: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
}

export class NotificationService {
  private static readonly DEFAULT_SETTINGS: NotificationSettings = {
    enabled: true,
    sendToTelegram: true,
    sendToWebSocket: true,
    minSeverity: 'medium',
    types: ['dps', 'accident', 'police', 'road_work'],
    cooldownMinutes: 5
  };

  private static lastNotificationTime = new Map<string, number>();
  private static settings: NotificationSettings = { ...this.DEFAULT_SETTINGS };

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static async initialize(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.loadSettings();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (this.settings.sendToTelegram) {
        await telegramBot.sendTestMessage();
      }
      
      console.log('‚úÖ NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationService:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private static async loadSettings(): Promise<void> {
    try {
      // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
   */
  static async notifyNewPost(postId: string): Promise<boolean> {
    if (!this.settings.enabled) {
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return false;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const post = await prisma.post.findUnique({
        where: { id: postId }
      });

      if (!post) {
        console.log('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', postId);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (!this.shouldNotify(post)) {
        console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞:', postId);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
      if (!this.checkCooldown(post.type, post.severity)) {
        console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ cooldown –¥–ª—è:', post.type);
        return false;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification: TelegramNotification = {
        type: post.type as any,
        severity: post.severity as any,
        description: post.description,
        location: {
          latitude: post.latitude,
          longitude: post.longitude,
          address: post.address || undefined,
          landmark: post.landmark || undefined
        },
        timestamp: post.timestamp,
        userName: post.userName || '–ê–Ω–æ–Ω–∏–º',
        photos: post.photos || undefined
      };

      let success = true;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –≥—Ä—É–ø–ø—É
      if (this.settings.sendToTelegram) {
        const telegramSuccess = await telegramBot.sendDPSNotification(notification);
        if (!telegramSuccess) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
          success = false;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      if (this.settings.sendToWebSocket) {
        await this.sendWebSocketNotification(postId, notification);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.updateCooldown(post.type, post.severity);

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞:', postId);
      return success;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private static shouldNotify(post: any): boolean {
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
    if (post.needsModeration || post.moderationStatus !== 'APPROVED') {
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ—Å—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞
    if (!this.settings.types.includes(post.type)) {
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–∏–ø –ø–æ—Å—Ç–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const severityLevels = { 'low': 1, 'medium': 2, 'high': 3, 'critical': 4 };
    const postLevel = severityLevels[post.severity as keyof typeof severityLevels] || 0;
    const minLevel = severityLevels[this.settings.minSeverity];
    
    if (postLevel < minLevel) {
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ');
      return false;
    }

    console.log('‚úÖ –ü–æ—Å—Ç –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç cooldown –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private static checkCooldown(type: string, severity: string): boolean {
    const key = `${type}_${severity}`;
    const lastTime = this.lastNotificationTime.get(key) || 0;
    const cooldownMs = this.settings.cooldownMinutes * 60 * 1000;
    
    return Date.now() - lastTime > cooldownMs;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private static updateCooldown(type: string, severity: string): void {
    const key = `${type}_${severity}`;
    this.lastNotificationTime.set(key, Date.now());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
   */
  private static async sendWebSocketNotification(postId: string, notification: TelegramNotification): Promise<void> {
    try {
      const message = {
        type: 'notification',
        data: {
          postId,
          notification,
          timestamp: Date.now()
        },
        timestamp: Date.now()
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      WebSocketManager.broadcast(message);
      
      console.log('üì± WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞:', postId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static async updateSettings(newSettings: Partial<NotificationSettings>): Promise<void> {
    this.settings = { ...this.settings, ...newSettings };
    console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.settings);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  static getSettings(): NotificationSettings {
    return { ...this.settings };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   */
  static async notifyCritical(description: string, location: { latitude: number; longitude: number }): Promise<boolean> {
    const notification: TelegramNotification = {
      type: 'other',
      severity: 'critical',
      description,
      location,
      timestamp: Date.now(),
      userName: '–°–∏—Å—Ç–µ–º–∞'
    };

    return await telegramBot.sendDPSNotification(notification);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static getStats(): { sent: number; blocked: number; errors: number } {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
    return { sent: 0, blocked: 0, errors: 0 };
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
NotificationService.initialize().catch(console.error);
