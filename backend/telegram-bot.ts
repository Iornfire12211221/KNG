/**
 * ü§ñ TELEGRAM BOT –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –ì–†–£–ü–ü–£
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –î–ü–°
 */

import { Telegraf } from 'telegraf';

export interface TelegramNotification {
  type: 'dps' | 'accident' | 'road_work' | 'traffic_jam' | 'police' | 'other';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  location: {
    latitude: number;
    longitude: number;
    address?: string;
    landmark?: string;
  };
  timestamp: number;
  userName: string;
  photos?: string[];
}

export class TelegramNotificationBot {
  private bot: Telegraf;
  private groupChatId: string;
  private isEnabled: boolean;

  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
    this.groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID || '';
    this.isEnabled = !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_GROUP_CHAT_ID);
    
    if (!this.isEnabled) {
      console.log('‚ö†Ô∏è Telegram Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
    } else {
      console.log('‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã:', this.groupChatId);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –î–ü–°
   */
  async sendDPSNotification(notification: TelegramNotification): Promise<boolean> {
    if (!this.isEnabled) {
      console.log('üì± Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return false;
    }

    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!this.shouldSendNotification(notification)) {
        console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:', notification.type, notification.severity);
        return false;
      }

      const message = this.formatNotificationMessage(notification);
      
      await this.bot.telegram.sendMessage(this.groupChatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        disable_notification: notification.severity === 'low' // –¢–∏—Ö–æ –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É:', notification.type, notification.severity);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
      return false;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private shouldSendNotification(notification: TelegramNotification): boolean {
    // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (notification.severity === 'critical') return true;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (notification.severity === 'high') return true;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if (notification.severity === 'medium') {
      return ['dps', 'accident', 'police', 'road_work'].includes(notification.type);
    }
    
    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –î–ü–° –∏ –∞–≤–∞—Ä–∏–π
    if (notification.severity === 'low') {
      return ['dps', 'accident'].includes(notification.type);
    }
    
    return false;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
   */
  private formatNotificationMessage(notification: TelegramNotification): string {
    const emoji = this.getTypeEmoji(notification.type);
    const severityEmoji = this.getSeverityEmoji(notification.severity);
    
    // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${emoji} ${severityEmoji} <b>${this.getTypeName(notification.type)}</b>\n\n`;
    
    // –û–ø–∏—Å–∞–Ω–∏–µ (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    const shortDescription = notification.description.length > 100 
      ? notification.description.substring(0, 100) + '...'
      : notification.description;
    message += `${shortDescription}\n\n`;
    
    // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (notification.location.address) {
      message += `üìç ${notification.location.address}\n`;
    } else if (notification.location.landmark) {
      message += `üìç ${notification.location.landmark}\n`;
    } else {
      message += `üìç ${notification.location.latitude.toFixed(4)}, ${notification.location.longitude.toFixed(4)}\n`;
    }
    
    // –í—Ä–µ–º—è
    const time = new Date(notification.timestamp).toLocaleString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit'
    });
    message += `üïê ${time}`;
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ)
    if (notification.userName && notification.userName !== '–ê–Ω–æ–Ω–∏–º') {
      message += `\nüë§ ${notification.userName}`;
    }
    
    return message;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
   */
  private getTypeEmoji(type: string): string {
    const emojis = {
      'dps': 'üöî',
      'accident': 'üí•',
      'road_work': 'üöß',
      'traffic_jam': 'üöó',
      'police': 'üëÆ',
      'other': '‚ö†Ô∏è'
    };
    return emojis[type as keyof typeof emojis] || '‚ö†Ô∏è';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  private getSeverityEmoji(severity: string): string {
    const emojis = {
      'critical': 'üî¥',
      'high': 'üü†',
      'medium': 'üü°',
      'low': 'üü¢'
    };
    return emojis[severity as keyof typeof emojis] || 'üü°';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   */
  private getTypeName(type: string): string {
    const names = {
      'dps': '–î–ü–°',
      'accident': '–ê–≤–∞—Ä–∏—è',
      'road_work': '–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
      'traffic_jam': '–ü—Ä–æ–±–∫–∞',
      'police': '–ü–æ–ª–∏—Ü–∏—è',
      'other': '–î—Ä—É–≥–æ–µ'
    };
    return names[type as keyof typeof names] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendTestMessage(): Promise<boolean> {
    if (!this.isEnabled) {
      console.log('üì± Telegram Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      await this.bot.telegram.sendMessage(
        this.groupChatId, 
        'ü§ñ <b>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –î–ü–° –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
        { parse_mode: 'HTML' }
      );
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo(): Promise<any> {
    if (!this.isEnabled) return null;
    
    try {
      return await this.bot.telegram.getMe();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramBot = new TelegramNotificationBot();
