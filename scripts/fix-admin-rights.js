#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å FOUNDER –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è herlabsn
 */

const { PrismaClient } = require('../lib/generated/prisma');

const prisma = new PrismaClient();

async function fixAdminRights() {
  try {
    console.log('üîß Starting admin rights fix...');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è herlabsn
    const user = await prisma.user.findFirst({
      where: { username: 'herlabsn' }
    });
    
    if (!user) {
      console.log('‚ùå User with username "herlabsn" not found');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const allUsers = await prisma.user.findMany({
        select: {
          id: true,
          telegramId: true,
          name: true,
          username: true,
          role: true,
          createdAt: true
        }
      });
      
      console.log('üìã All users in database:');
      allUsers.forEach(u => {
        console.log(`  - ${u.name} (@${u.username}) - ${u.role} (ID: ${u.id})`);
      });
      
      return;
    }
    
    console.log(`üë§ Found user: ${user.name} (@${user.username}) - Current role: ${user.role}`);
    
    if (user.role === 'FOUNDER') {
      console.log('‚úÖ User already has FOUNDER role');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ FOUNDER
    const updatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { role: 'FOUNDER' }
    });
    
    console.log(`üéâ Successfully updated user role: ${updatedUser.name} -> ${updatedUser.role}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.user.groupBy({
      by: ['role'],
      _count: { role: true }
    });
    
    console.log('\nüìä User roles statistics:');
    stats.forEach(stat => {
      console.log(`  - ${stat.role}: ${stat._count.role} users`);
    });
    
  } catch (error) {
    console.error('‚ùå Error fixing admin rights:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixAdminRights();
