#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ö–∏–Ω–≥–∏—Å–µ–ø–ø)
 */

import { PrismaClient } from '../lib/generated/prisma';
import { EnhancedAIModeration } from '../lib/enhanced-ai-moderation';
import { SmallCityOptimizer } from '../lib/small-city-optimizer';

const prisma = new PrismaClient();

async function setupEnhancedSystem() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π');
  console.log('====================================================');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await applyDatabaseMigrations();
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n');

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    await SmallCityOptimizer.createSmallCityStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n');

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤...');
    await EnhancedAIModeration.moderatePendingPosts();
    console.log('‚úÖ –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');

    // 4. –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ—Å—Ç–æ–≤
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤...');
    await SmallCityOptimizer.clusterPostsForSmallCity();
    console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã\n');

    // 5. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await SmallCityOptimizer.cleanupForSmallCity();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');

    // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìà –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
    await showSystemStats();

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: bun run dev');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ crontab');
    console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã');

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

async function applyDatabaseMigrations() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
  const posts = await prisma.post.findMany({
    where: {
      moderationStatus: null
    }
  });

  console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${posts.length} –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏...`);

  for (const post of posts) {
    await prisma.post.update({
      where: { id: post.id },
      data: {
        moderationStatus: post.needsModeration ? 'PENDING' : 'APPROVED',
        moderationScore: post.needsModeration ? 0.5 : 0.9,
        moderationReason: post.needsModeration ? '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã' : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        moderatedAt: post.needsModeration ? null : BigInt(Date.now()),
        moderatedBy: post.needsModeration ? null : 'MIGRATION',
        trafficImpact: 'MINOR',
        emergencyServices: false,
        casualties: 0,
        viewCount: 0,
        reportCount: 0,
        verifiedBy: []
      }
    });
  }

  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤`);
}

async function showSystemStats() {
  try {
    const stats = await SmallCityOptimizer.getOptimizedStats();
    
    console.log(`   üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${stats.total}`);
    console.log(`   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers}/${stats.maxUsers} (${stats.utilizationPercent}%)`);
    console.log(`   üèôÔ∏è –¢–∏–ø –≥–æ—Ä–æ–¥–∞: ${stats.citySize}`);
    
    console.log('\n   üìà –ü–æ —Ç–∏–ø–∞–º:');
    Object.entries(stats.byType).forEach(([type, count]) => {
      console.log(`      ${type}: ${count}`);
    });
    
    console.log('\n   ‚ö†Ô∏è –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:');
    Object.entries(stats.bySeverity).forEach(([severity, count]) => {
      console.log(`      ${severity}: ${count}`);
    });

    console.log('\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    stats.recommendations.forEach(rec => {
      console.log(`      ‚Ä¢ ${rec}`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try {
      const moderationStats = await EnhancedAIModeration.getModerationStats();
      console.log('\n   ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
      console.log(`      –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${moderationStats.total}`);
      Object.entries(moderationStats.byDecision).forEach(([decision, data]) => {
        console.log(`      ${decision}: ${data.count} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(data.avgConfidence * 100).toFixed(1)}%)`);
      });
    } catch (error) {
      console.log('\n   ü§ñ –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏—è: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
if (require.main === module) {
  setupEnhancedSystem();
}

export { setupEnhancedSystem };
