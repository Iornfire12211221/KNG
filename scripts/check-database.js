#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Å—Ç—ã –∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */

const { PrismaClient } = require('../lib/generated/prisma');

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç Checking database status...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ Database connection successful\n');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userStats = await prisma.user.groupBy({
      by: ['role'],
      _count: { role: true }
    });
    
    const totalUsers = await prisma.user.count();
    console.log(`üë• Total users: ${totalUsers}`);
    console.log('üìä Users by role:');
    userStats.forEach(stat => {
      console.log(`  - ${stat.role}: ${stat._count.role} users`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        telegramId: true,
        name: true,
        username: true,
        role: true,
        isMuted: true,
        isBanned: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('\nüë§ All users:');
    allUsers.forEach((user, index) => {
      const status = user.isBanned ? 'üö´ BANNED' : user.isMuted ? 'üîá MUTED' : '‚úÖ ACTIVE';
      console.log(`  ${index + 1}. ${user.name} (@${user.username || 'no-username'}) - ${user.role} ${status}`);
      console.log(`     ID: ${user.id}, Telegram ID: ${user.telegramId || 'none'}`);
      console.log(`     Created: ${user.createdAt.toISOString()}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
    const totalPosts = await prisma.post.count();
    const postsByType = await prisma.post.groupBy({
      by: ['type'],
      _count: { type: true }
    });
    
    console.log(`\nüìù Total posts: ${totalPosts}`);
    console.log('üìä Posts by type:');
    postsByType.forEach(stat => {
      console.log(`  - ${stat.type}: ${stat._count.type} posts`);
    });
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    const recentPosts = await prisma.post.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        description: true,
        type: true,
        severity: true,
        userName: true,
        createdAt: true
      }
    });
    
    console.log('\nüìù Recent posts:');
    recentPosts.forEach((post, index) => {
      console.log(`  ${index + 1}. ${post.type.toUpperCase()} (${post.severity}) by ${post.userName}`);
      console.log(`     "${post.description.substring(0, 50)}${post.description.length > 50 ? '...' : ''}"`);
      console.log(`     Created: ${post.createdAt.toISOString()}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è herlabsn
    const herlabsnUser = await prisma.user.findFirst({
      where: { username: 'herlabsn' }
    });
    
    console.log('\nüîç herlabsn user check:');
    if (herlabsnUser) {
      console.log(`‚úÖ Found: ${herlabsnUser.name} (@${herlabsnUser.username})`);
      console.log(`   Role: ${herlabsnUser.role}`);
      console.log(`   Admin: ${herlabsnUser.role === 'FOUNDER' || herlabsnUser.role === 'ADMIN' ? 'YES' : 'NO'}`);
      console.log(`   ID: ${herlabsnUser.id}`);
    } else {
      console.log('‚ùå User "herlabsn" not found in database');
    }
    
  } catch (error) {
    console.error('‚ùå Error checking database:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkDatabase();
