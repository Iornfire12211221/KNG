/**
 * üß† SMART AI HOOK v3.0.0
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —É–º–Ω–æ–π –ò–ò-—Å–∏—Å—Ç–µ–º–æ–π
 */

import { useState, useEffect, useCallback } from 'react';
import { smartAI, SmartPost, SmartDecision } from '../lib/smart-ai-system';

export const useSmartAI = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [modelStats, setModelStats] = useState({
    version: '3.0.0',
    intelligence: 0,
    accuracy: 0,
    totalDecisions: 0,
    correctDecisions: 0,
    patternsCount: 0,
    lastTraining: Date.now()
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
  useEffect(() => {
    const loadStats = () => {
      const stats = smartAI.getModelStats();
      setModelStats(stats);
    };

    loadStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadStats, 30000);
    return () => clearInterval(interval);
  }, []);

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–π –ò–ò
   */
  const analyzePost = useCallback(async (post: SmartPost): Promise<SmartDecision> => {
    setIsAnalyzing(true);
    
    try {
      console.log('üß† Starting smart AI analysis...');
      const decision = await smartAI.moderatePost(post);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setModelStats(smartAI.getModelStats());
      
      return decision;
    } catch (error) {
      console.error('‚ùå Smart AI analysis error:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  }, []);

  /**
   * –û–±—É—á–µ–Ω–∏–µ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
   */
  const learnFromModerator = useCallback(async (postId: string, decision: 'APPROVED' | 'REJECTED') => {
    try {
      console.log('üß† Learning from moderator decision...');
      await smartAI.learnFromModerator(postId, decision);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setModelStats(smartAI.getModelStats());
      
      console.log('‚úÖ Learning completed');
    } catch (error) {
      console.error('‚ùå Learning error:', error);
    }
  }, []);

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò
   */
  const testAI = useCallback(async (testPost: Partial<SmartPost>): Promise<SmartDecision> => {
    const fullPost: SmartPost = {
      id: 'test_' + Date.now(),
      type: testPost.type || 'other',
      description: testPost.description || '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
      severity: testPost.severity || 'medium',
      hasPhoto: testPost.hasPhoto || false,
      photo: testPost.photo,
      location: testPost.location,
      userId: 'test_user',
      userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      timestamp: Date.now()
    };

    return await analyzePost(fullPost);
  }, [analyzePost]);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  const getRecommendations = useCallback(() => {
    const recommendations = [];
    
    if (modelStats.intelligence < 50) {
      recommendations.push('–ò–ò –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (modelStats.accuracy < 80) {
      recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏');
    }
    
    if (modelStats.patternsCount < 10) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ –µ—â–µ –∏–∑—É—á–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    if (recommendations.length === 0) {
      recommendations.push('–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!');
    }
    
    return recommendations;
  }, [modelStats]);

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
   */
  const forceLearning = useCallback(async () => {
    try {
      console.log('üß† Forcing AI learning...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
      setModelStats(smartAI.getModelStats());
    } catch (error) {
      console.error('‚ùå Force learning error:', error);
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isAnalyzing,
    modelStats,
    
    // –§—É–Ω–∫—Ü–∏–∏
    analyzePost,
    learnFromModerator,
    testAI,
    getRecommendations,
    forceLearning,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    isSmart: modelStats.intelligence > 50,
    isAccurate: modelStats.accuracy > 80,
    isLearning: modelStats.patternsCount < 20
  };
};
