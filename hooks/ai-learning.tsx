import createContextHook from '@nkzw/create-context-hook';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useEffect, useState, useCallback, useMemo, useRef } from 'react';
import { AITrainingData, AIModelStats, DPSPost } from '@/types';

const INITIAL_MODEL_STATS: AIModelStats = {
  totalDecisions: 0,
  correctDecisions: 0,
  falsePositives: 0,
  falseNegatives: 0,
  accuracy: 0,
  lastTrainingDate: Date.now(),
  modelVersion: '2.0.0' // –£–º–Ω–∞—è —Å–∞–º–æ–æ–±—É—á–∞—é—â–∞—è—Å—è –≤–µ—Ä—Å–∏—è
};

const TRAINING_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç - –æ—á–µ–Ω—å —á–∞—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ
const MIN_TRAINING_SAMPLES = 5; // –ú–∏–Ω–∏–º—É–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
const ADVANCED_TRAINING_SAMPLES = 50; // –î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

export const [AILearningProvider, useAILearning] = createContextHook(() => {
  const [trainingData, setTrainingData] = useState<AITrainingData[]>([]);
  const [modelStats, setModelStats] = useState<AIModelStats>(INITIAL_MODEL_STATS);
  const [isTraining, setIsTraining] = useState(false);
  const lastSyncTimeRef = useRef(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
  useEffect(() => {
    const loadData = async () => {
      try {
        const [storedTraining, storedStats] = await Promise.all([
          AsyncStorage.getItem('ai_training_data'),
          AsyncStorage.getItem('ai_model_stats')
        ]);

        if (storedTraining) {
          const parsed = JSON.parse(storedTraining);
          setTrainingData(parsed.slice(-1000)); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        }

        if (storedStats) {
          setModelStats(JSON.parse(storedStats));
        }
      } catch (error) {
        console.error('Error loading AI training data:', error);
      }
    };

    loadData();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
  const saveTrainingData = useCallback(async (data: AITrainingData[]) => {
    try {
      await AsyncStorage.setItem('ai_training_data', JSON.stringify(data.slice(-1000)));
    } catch (error) {
      console.error('Error saving training data:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
  const saveModelStats = useCallback(async (stats: AIModelStats) => {
    try {
      await AsyncStorage.setItem('ai_model_stats', JSON.stringify(stats));
    } catch (error) {
      console.error('Error saving model stats:', error);
    }
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const getTimeOfDay = useCallback((hour: number): 'morning' | 'day' | 'evening' | 'night' => {
    if (hour >= 6 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'day';
    if (hour >= 18 && hour < 22) return 'evening';
    return 'night';
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  const getSeason = useCallback((month: number): 'winter' | 'spring' | 'summer' | 'autumn' => {
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }, []);

  // –£–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
  const trainModelInternal = useCallback(async (data: AITrainingData[]) => {
    if (isTraining) return;
    
    setIsTraining(true);
    console.log('üß† Starting SMART AI model training with', data.length, 'samples');

    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
      const labeledData = data.filter(item => item.moderatorDecision);
      
      if (labeledData.length < MIN_TRAINING_SAMPLES) {
        console.log('Not enough labeled data for training');
        setIsTraining(false);
        return;
      }

      // –£–ú–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const smartPatterns = {
        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        timePatterns: {} as Record<string, { correct: number; total: number; confidence: number }>,
        typePatterns: {} as Record<string, { correct: number; total: number; confidence: number }>,
        photoPatterns: { withPhoto: { correct: 0, total: 0, confidence: 0 }, withoutPhoto: { correct: 0, total: 0, confidence: 0 } },
        seasonPatterns: {} as Record<string, { correct: number; total: number; confidence: number }>,
        
        // –ù–û–í–´–ï –£–ú–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´
        confidencePatterns: {} as Record<string, { correct: number; total: number }>, // –ü–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        descriptionLengthPatterns: {} as Record<string, { correct: number; total: number }>, // –ü–æ –¥–ª–∏–Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è
        keywordPatterns: {} as Record<string, { correct: number; total: number }>, // –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        userBehaviorPatterns: {} as Record<string, { correct: number; total: number }>, // –ü–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        contextPatterns: {} as Record<string, { correct: number; total: number }>, // –ü–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        errorPatterns: {} as Record<string, { correct: number; total: number }>, // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        successPatterns: {} as Record<string, { correct: number; total: number }> // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞
      };

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      labeledData.forEach(item => {
        const wasCorrect = 
          (item.aiDecision === 'approve' && item.moderatorDecision === 'approved') ||
          (item.aiDecision === 'reject' && item.moderatorDecision === 'rejected');

        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        updatePattern(smartPatterns.timePatterns, item.timeOfDay, wasCorrect);
        updatePattern(smartPatterns.typePatterns, item.postType, wasCorrect);
        updatePattern(smartPatterns.seasonPatterns, item.season, wasCorrect);
        
        const photoKey = item.hasPhoto ? 'withPhoto' : 'withoutPhoto';
        smartPatterns.photoPatterns[photoKey].total++;
        if (wasCorrect) smartPatterns.photoPatterns[photoKey].correct++;

        // –ù–û–í–´–ï –£–ú–ù–´–ï –ê–ù–ê–õ–ò–ó–´
        
        // 1. –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ò–ò
        const confidenceLevel = getConfidenceLevel(item.aiConfidence);
        updatePattern(smartPatterns.confidencePatterns, confidenceLevel, wasCorrect);

        // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–ª–∏–Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è
        const descLength = getDescriptionLengthCategory(item.description);
        updatePattern(smartPatterns.descriptionLengthPatterns, descLength, wasCorrect);

        // 3. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const keywords = extractKeywords(item.description);
        keywords.forEach(keyword => {
          updatePattern(smartPatterns.keywordPatterns, keyword, wasCorrect);
        });

        // 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤—Ä–µ–º—è + —Ç–∏–ø + —Ñ–æ—Ç–æ)
        const context = `${item.timeOfDay}_${item.postType}_${item.hasPhoto ? 'photo' : 'no_photo'}`;
        updatePattern(smartPatterns.contextPatterns, context, wasCorrect);

        // 5. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—Ö–æ–≤
        if (wasCorrect) {
          const successPattern = `${item.postType}_${item.timeOfDay}_success`;
          updatePattern(smartPatterns.successPatterns, successPattern, true);
        } else {
          const errorPattern = `${item.postType}_${item.timeOfDay}_error`;
          updatePattern(smartPatterns.errorPatterns, errorPattern, true);
        }
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
      calculatePatternConfidence(smartPatterns);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      await AsyncStorage.setItem('ai_smart_patterns', JSON.stringify(smartPatterns));
      await AsyncStorage.setItem('ai_learned_patterns', JSON.stringify(smartPatterns)); // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

      // –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –º–æ–¥–µ–ª—å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
      const smartModel = createSmartModel(smartPatterns, labeledData);
      await AsyncStorage.setItem('ai_smart_model', JSON.stringify(smartModel));

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º "—É–º–Ω–æ—Å—Ç–∏"
      const intelligenceLevel = Math.min(Math.floor(labeledData.length / 10), 10);
      const newVersion = `2.${intelligenceLevel}.${labeledData.length % 100}`;
      
      const updatedStats: AIModelStats = {
        ...modelStats,
        totalDecisions: modelStats.totalDecisions + labeledData.length,
        correctDecisions: modelStats.correctDecisions + labeledData.filter(item => 
          (item.aiDecision === 'approve' && item.moderatorDecision === 'approved') ||
          (item.aiDecision === 'reject' && item.moderatorDecision === 'rejected')
        ).length,
        lastTrainingDate: Date.now(),
        modelVersion: newVersion,
        accuracy: modelStats.totalDecisions > 0 
          ? ((modelStats.correctDecisions + labeledData.filter(item => 
              (item.aiDecision === 'approve' && item.moderatorDecision === 'approved') ||
              (item.aiDecision === 'reject' && item.moderatorDecision === 'rejected')
            ).length) / (modelStats.totalDecisions + labeledData.length)) * 100
          : 0
      };

      setModelStats(updatedStats);
      await saveModelStats(updatedStats);
      lastSyncTimeRef.current = Date.now();

      console.log('üß† SMART AI model training completed!');
      console.log('üìä New version:', newVersion);
      console.log('üéØ Intelligence level:', intelligenceLevel);
      console.log('üìà Accuracy:', updatedStats.accuracy.toFixed(1) + '%');
      console.log('üîç Learned patterns:', Object.keys(smartPatterns).length);
      
    } catch (error) {
      console.error('‚ùå Error training SMART AI model:', error);
    } finally {
      setIsTraining(false);
    }
  }, [isTraining, modelStats, saveModelStats]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
  const updatePattern = (patterns: Record<string, { correct: number; total: number }>, key: string, wasCorrect: boolean) => {
    if (!patterns[key]) {
      patterns[key] = { correct: 0, total: 0 };
    }
    patterns[key].total++;
    if (wasCorrect) patterns[key].correct++;
  };

  const getConfidenceLevel = (confidence: number): string => {
    if (confidence >= 0.9) return 'very_high';
    if (confidence >= 0.8) return 'high';
    if (confidence >= 0.7) return 'medium_high';
    if (confidence >= 0.6) return 'medium';
    if (confidence >= 0.5) return 'medium_low';
    if (confidence >= 0.3) return 'low';
    return 'very_low';
  };

  const getDescriptionLengthCategory = (description: string): string => {
    const length = description.length;
    if (length === 0) return 'empty';
    if (length < 20) return 'very_short';
    if (length < 50) return 'short';
    if (length < 100) return 'medium';
    if (length < 200) return 'long';
    return 'very_long';
  };

  const extractKeywords = (description: string): string[] => {
    const keywords = [];
    const text = description.toLowerCase();
    
    // –î–æ—Ä–æ–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const roadKeywords = ['–¥–ø—Å', '–¥—Ç–ø', '–∫–∞–º–µ—Ä–∞', '—Ä–µ–º–æ–Ω—Ç', '–¥–æ—Ä–æ–≥', '–ø–∞—Ç—Ä—É–ª—å', '–ø—Ä–æ–±–∫', '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–æ–±—ä–µ–∑–¥', '–∑–Ω–∞–∫', '–º–∞—à–∏–Ω', '–∞–≤—Ç–æ'];
    roadKeywords.forEach(keyword => {
      if (text.includes(keyword)) keywords.push(`road_${keyword}`);
    });

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    const emotionalWords = ['—Å—Ä–æ—á–Ω–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ', '–æ–ø–∞—Å–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–º–µ–¥–ª–µ–Ω–Ω–æ'];
    emotionalWords.forEach(word => {
      if (text.includes(word)) keywords.push(`emotion_${word}`);
    });

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const timeWords = ['—Å–µ–π—á–∞—Å', '—Ç–æ–ª—å–∫–æ —á—Ç–æ', '–Ω–µ–¥–∞–≤–Ω–æ', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞'];
    timeWords.forEach(word => {
      if (text.includes(word)) keywords.push(`time_${word}`);
    });

    return keywords;
  };

  const calculatePatternConfidence = (patterns: any) => {
    Object.keys(patterns).forEach(patternType => {
      if (typeof patterns[patternType] === 'object' && patterns[patternType] !== null) {
        Object.keys(patterns[patternType]).forEach(key => {
          const pattern = patterns[patternType][key];
          if (pattern.total > 0) {
            pattern.confidence = pattern.correct / pattern.total;
          }
        });
      }
    });
  };

  const createSmartModel = (patterns: any, data: AITrainingData[]) => {
    return {
      version: '2.0.0',
      trainedAt: Date.now(),
      sampleCount: data.length,
      patterns: patterns,
      weights: {
        timeWeight: 0.2,
        typeWeight: 0.3,
        photoWeight: 0.2,
        confidenceWeight: 0.15,
        contextWeight: 0.15
      },
      thresholds: {
        approveThreshold: 0.75,
        rejectThreshold: 0.25,
        moderateThreshold: 0.5
      }
    };
  };

  // –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –ò–ò
  const recordAIDecision = useCallback(
    async (
      post: DPSPost,
      aiDecision: 'approve' | 'reject',
      confidence: number
    ) => {
      const now = new Date();
      const newRecord: AITrainingData = {
        id: `training_${Date.now()}_${Math.random()}`,
        postId: post.id,
        postType: post.type,
        description: post.description.slice(0, 200),
        hasPhoto: !!post.photo,
        aiDecision,
        aiConfidence: confidence,
        timestamp: Date.now(),
        timeOfDay: getTimeOfDay(now.getHours()),
        season: getSeason(now.getMonth() + 1)
      };

      const updatedData = [...trainingData, newRecord];
      setTrainingData(updatedData);
      await saveTrainingData(updatedData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const updatedStats = {
        ...modelStats,
        totalDecisions: modelStats.totalDecisions + 1
      };
      setModelStats(updatedStats);
      await saveModelStats(updatedStats);
    },
    [trainingData, modelStats, getTimeOfDay, getSeason, saveTrainingData, saveModelStats]
  );

  // –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  const recordModeratorDecision = useCallback(
    async (postId: string, decision: 'approved' | 'rejected') => {
      const updatedData = trainingData.map(item => {
        if (item.postId === postId && !item.moderatorDecision) {
          const wasCorrect = 
            (item.aiDecision === 'approve' && decision === 'approved') ||
            (item.aiDecision === 'reject' && decision === 'rejected');

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const updatedStats = {
            ...modelStats,
            correctDecisions: wasCorrect 
              ? modelStats.correctDecisions + 1 
              : modelStats.correctDecisions,
            falsePositives: !wasCorrect && item.aiDecision === 'approve'
              ? modelStats.falsePositives + 1
              : modelStats.falsePositives,
            falseNegatives: !wasCorrect && item.aiDecision === 'reject'
              ? modelStats.falseNegatives + 1
              : modelStats.falseNegatives,
            accuracy: modelStats.totalDecisions > 0
              ? ((wasCorrect ? modelStats.correctDecisions + 1 : modelStats.correctDecisions) / 
                 modelStats.totalDecisions) * 100
              : 0
          };
          setModelStats(updatedStats);
          saveModelStats(updatedStats);

          return { ...item, moderatorDecision: decision };
        }
        return item;
      });

      setTrainingData(updatedData);
      await saveTrainingData(updatedData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
      if (updatedData.length >= MIN_TRAINING_SAMPLES && 
          Date.now() - lastSyncTimeRef.current > TRAINING_INTERVAL) {
        await trainModelInternal(updatedData);
      }
    },
    [trainingData, modelStats, saveTrainingData, saveModelStats, trainModelInternal]
  );

  // –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const recordUserFeedback = useCallback(
    async (postId: string, feedback: 'positive' | 'negative') => {
      const updatedData = trainingData.map(item => {
        if (item.postId === postId) {
          return { ...item, userFeedback: feedback };
        }
        return item;
      });

      setTrainingData(updatedData);
      await saveTrainingData(updatedData);
    },
    [trainingData, saveTrainingData]
  );

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –£–ú–ù–û–ì–û —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
  const getEnhancedDecision = useCallback(async (
    baseDecision: 'approve' | 'reject',
    confidence: number,
    postType: string,
    hasPhoto: boolean,
    description?: string
  ): Promise<{ decision: 'approve' | 'reject'; confidence: number; reasoning?: string }> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–º–Ω—É—é –º–æ–¥–µ–ª—å
      const [smartModelStr, patternsStr] = await Promise.all([
        AsyncStorage.getItem('ai_smart_model'),
        AsyncStorage.getItem('ai_smart_patterns')
      ]);

      if (!smartModelStr || !patternsStr) {
        return { decision: baseDecision, confidence, reasoning: 'No smart model available' };
      }

      const smartModel = JSON.parse(smartModelStr);
      const patterns = JSON.parse(patternsStr);
      const now = new Date();
      const timeOfDay = getTimeOfDay(now.getHours());
      const season = getSeason(now.getMonth() + 1);

      console.log('üß† Using SMART AI decision making...');

      // –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó —Å –≤–µ—Å–∞–º–∏
      let smartScore = 0;
      let totalWeight = 0;
      const reasoning: string[] = [];

      // 1. –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–≤–µ—Å 0.2)
      if (patterns.timePatterns[timeOfDay]) {
        const timeConfidence = patterns.timePatterns[timeOfDay].confidence || 0.5;
        smartScore += timeConfidence * smartModel.weights.timeWeight;
        totalWeight += smartModel.weights.timeWeight;
        reasoning.push(`Time pattern: ${(timeConfidence * 100).toFixed(1)}%`);
      }

      // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞ (–≤–µ—Å 0.3)
      if (patterns.typePatterns[postType]) {
        const typeConfidence = patterns.typePatterns[postType].confidence || 0.5;
        smartScore += typeConfidence * smartModel.weights.typeWeight;
        totalWeight += smartModel.weights.typeWeight;
        reasoning.push(`Type pattern: ${(typeConfidence * 100).toFixed(1)}%`);
      }

      // 3. –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–æ—Ç–æ (–≤–µ—Å 0.2)
      const photoKey = hasPhoto ? 'withPhoto' : 'withoutPhoto';
      if (patterns.photoPatterns[photoKey].total > 0) {
        const photoConfidence = patterns.photoPatterns[photoKey].confidence || 0.5;
        smartScore += photoConfidence * smartModel.weights.photoWeight;
        totalWeight += smartModel.weights.photoWeight;
        reasoning.push(`Photo pattern: ${(photoConfidence * 100).toFixed(1)}%`);
      }

      // 4. –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–µ—Å 0.15)
      const confidenceLevel = getConfidenceLevel(confidence);
      if (patterns.confidencePatterns[confidenceLevel]) {
        const confPatternConfidence = patterns.confidencePatterns[confidenceLevel].correct / patterns.confidencePatterns[confidenceLevel].total;
        smartScore += confPatternConfidence * smartModel.weights.confidenceWeight;
        totalWeight += smartModel.weights.confidenceWeight;
        reasoning.push(`Confidence pattern: ${(confPatternConfidence * 100).toFixed(1)}%`);
      }

      // 5. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–µ—Å 0.15)
      const context = `${timeOfDay}_${postType}_${hasPhoto ? 'photo' : 'no_photo'}`;
      if (patterns.contextPatterns[context]) {
        const contextConfidence = patterns.contextPatterns[context].correct / patterns.contextPatterns[context].total;
        smartScore += contextConfidence * smartModel.weights.contextWeight;
        totalWeight += smartModel.weights.contextWeight;
        reasoning.push(`Context pattern: ${(contextConfidence * 100).toFixed(1)}%`);
      }

      // 6. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
      if (description) {
        const keywords = extractKeywords(description);
        let keywordScore = 0;
        let keywordCount = 0;
        
        keywords.forEach(keyword => {
          if (patterns.keywordPatterns[keyword]) {
            const keywordConfidence = patterns.keywordPatterns[keyword].correct / patterns.keywordPatterns[keyword].total;
            keywordScore += keywordConfidence;
            keywordCount++;
          }
        });
        
        if (keywordCount > 0) {
          const avgKeywordConfidence = keywordScore / keywordCount;
          smartScore += avgKeywordConfidence * 0.1; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å 0.1
          totalWeight += 0.1;
          reasoning.push(`Keywords: ${(avgKeywordConfidence * 100).toFixed(1)}%`);
        }
      }

      // 7. –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
      if (description) {
        const descLength = getDescriptionLengthCategory(description);
        if (patterns.descriptionLengthPatterns[descLength]) {
          const lengthConfidence = patterns.descriptionLengthPatterns[descLength].correct / patterns.descriptionLengthPatterns[descLength].total;
          smartScore += lengthConfidence * 0.05; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å 0.05
          totalWeight += 0.05;
          reasoning.push(`Length pattern: ${(lengthConfidence * 100).toFixed(1)}%`);
        }
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —É–º–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      const smartConfidence = totalWeight > 0 ? smartScore / totalWeight : confidence;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
      let finalDecision = baseDecision;
      let finalConfidence = smartConfidence;

      if (smartConfidence >= smartModel.thresholds.approveThreshold) {
        finalDecision = 'approve';
        finalConfidence = Math.min(smartConfidence, 0.95);
      } else if (smartConfidence <= smartModel.thresholds.rejectThreshold) {
        finalDecision = 'reject';
        finalConfidence = Math.max(1 - smartConfidence, 0.05);
      } else {
        // –°—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
        finalConfidence = smartConfidence;
      }

      console.log('üß† SMART AI Decision:', {
        baseDecision,
        smartConfidence: (smartConfidence * 100).toFixed(1) + '%',
        finalDecision,
        finalConfidence: (finalConfidence * 100).toFixed(1) + '%',
        reasoning: reasoning.join(', ')
      });

      return { 
        decision: finalDecision, 
        confidence: finalConfidence,
        reasoning: `Smart analysis: ${reasoning.join(', ')}`
      };
    } catch (error) {
      console.error('‚ùå Error getting SMART decision:', error);
      return { decision: baseDecision, confidence, reasoning: 'Smart analysis failed' };
    }
  }, [getTimeOfDay, getSeason]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
  const trainModel = useCallback(() => {
    return trainModelInternal(trainingData);
  }, [trainModelInternal, trainingData]);

  // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï - –æ—á–µ–Ω—å —á–∞—Å—Ç–æ–µ –∏ —É–º–Ω–æ–µ
  useEffect(() => {
    const interval = setInterval(() => {
      const labeledData = trainingData.filter(item => item.moderatorDecision);
      
      // –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
      if (labeledData.length >= MIN_TRAINING_SAMPLES && 
          Date.now() - lastSyncTimeRef.current > TRAINING_INTERVAL) {
        console.log('ü§ñ Auto-training triggered:', labeledData.length, 'samples');
        trainModelInternal(trainingData);
      }
      
      // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
      if (labeledData.length >= ADVANCED_TRAINING_SAMPLES && 
          Date.now() - lastSyncTimeRef.current > TRAINING_INTERVAL * 2) {
        console.log('üß† Advanced auto-training triggered:', labeledData.length, 'samples');
        trainModelInternal(trainingData);
      }
    }, TRAINING_INTERVAL); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, [trainingData, trainModelInternal]);

  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  useEffect(() => {
    const labeledData = trainingData.filter(item => item.moderatorDecision);
    if (labeledData.length >= MIN_TRAINING_SAMPLES && 
        labeledData.length % 5 === 0 && // –ö–∞–∂–¥—ã–µ 5 –Ω–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        Date.now() - lastSyncTimeRef.current > 30 * 1000) { // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏—è–º–∏
      console.log('‚ö° Quick self-learning triggered:', labeledData.length, 'samples');
      trainModelInternal(trainingData);
    }
  }, [trainingData, trainModelInternal]);

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const cleanupInterval = setInterval(() => {
      const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
      const recentData = trainingData.filter(item => item.timestamp > oneWeekAgo);
      
      if (recentData.length < trainingData.length) {
        setTrainingData(recentData);
        saveTrainingData(recentData);
      }
    }, 24 * 60 * 60 * 1000); // –†–∞–∑ –≤ –¥–µ–Ω—å

    return () => clearInterval(cleanupInterval);
  }, [trainingData, saveTrainingData]);

  return useMemo(
    () => ({
      trainingData,
      modelStats,
      isTraining,
      recordAIDecision,
      recordModeratorDecision,
      recordUserFeedback,
      getEnhancedDecision,
      trainModel
    }),
    [
      trainingData,
      modelStats,
      isTraining,
      recordAIDecision,
      recordModeratorDecision,
      recordUserFeedback,
      getEnhancedDecision,
      trainModel
    ]
  );
});