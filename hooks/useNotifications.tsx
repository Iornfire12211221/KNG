/**
 * üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * WebSocket + Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + –ì–µofencing
 */

import { useState, useEffect, useCallback, useRef } from 'react';
import { Alert, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useApp } from './app-store';

export interface Notification {
  id: string;
  type: 'new_post' | 'post_approved' | 'post_rejected' | 'user_mentioned' | 'system' | 'geofence';
  title: string;
  message: string;
  data?: any;
  priority: 'low' | 'normal' | 'high' | 'urgent';
  timestamp: number;
  read: boolean;
  userId?: string;
  postId?: string;
  location?: {
    latitude: number;
    longitude: number;
    radius: number;
  };
}

export interface NotificationSettings {
  enabled: boolean;
  sound: boolean;
  vibration: boolean;
  geofencing: boolean;
  geofencingRadius: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  types: {
    newPost: boolean;
    postApproved: boolean;
    postRejected: boolean;
    userMentioned: boolean;
    system: boolean;
    geofence: boolean;
  };
  quietHours: {
    enabled: boolean;
    start: string; // "22:00"
    end: string;   // "08:00"
  };
}

const DEFAULT_SETTINGS: NotificationSettings = {
  enabled: true,
  sound: true,
  vibration: true,
  geofencing: true,
  geofencingRadius: 2000, // 2–∫–º
  types: {
    newPost: true,
    postApproved: true,
    postRejected: true,
    userMentioned: true,
    system: true,
    geofence: true,
  },
  quietHours: {
    enabled: false,
    start: '22:00',
    end: '08:00',
  },
};

export function useNotifications() {
  const { currentUser, posts } = useApp();
  
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [settings, setSettings] = useState<NotificationSettings>(DEFAULT_SETTINGS);
  const [isConnected, setIsConnected] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 999; // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  const cloudflareReconnectRef = useRef<NodeJS.Timeout | null>(null); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = useCallback(async () => {
    try {
      const saved = await AsyncStorage.getItem('notification_settings');
      if (saved) {
        const parsedSettings = JSON.parse(saved);
        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = useCallback(async (newSettings: Partial<NotificationSettings>) => {
    try {
      const updatedSettings = { ...settings, ...newSettings };
      setSettings(updatedSettings);
      await AsyncStorage.setItem('notification_settings', JSON.stringify(updatedSettings));
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }, [settings]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const loadNotifications = useCallback(async () => {
    try {
      const saved = await AsyncStorage.getItem('notifications');
      if (saved) {
        const parsedNotifications = JSON.parse(saved);
        setNotifications(parsedNotifications);
        
        // –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        const unread = parsedNotifications.filter((n: Notification) => !n.read).length;
        setUnreadCount(unread);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const saveNotifications = useCallback(async (newNotifications: Notification[]) => {
    try {
      setNotifications(newNotifications);
      await AsyncStorage.setItem('notifications', JSON.stringify(newNotifications));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
      const unread = newNotifications.filter(n => !n.read).length;
      setUnreadCount(unread);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const addNotification = useCallback(async (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {
    if (!settings.enabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const typeKey = notification.type.replace('_', '') as keyof typeof settings.types;
    if (!settings.types[typeKey]) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    if (settings.quietHours.enabled) {
      const now = new Date();
      const currentTime = now.getHours() * 60 + now.getMinutes();
      const [startHour, startMin] = settings.quietHours.start.split(':').map(Number);
      const [endHour, endMin] = settings.quietHours.end.split(':').map(Number);
      const startTime = startHour * 60 + startMin;
      const endTime = endHour * 60 + endMin;
      
      if (currentTime >= startTime || currentTime <= endTime) {
        console.log('üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏—Ö–∏–º–∏ —á–∞—Å–∞–º–∏');
        return;
      }
    }

    const newNotification: Notification = {
      ...notification,
      id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: Date.now(),
      read: false,
    };

    const updatedNotifications = [newNotification, ...notifications.slice(0, 99)]; // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100
    await saveNotifications(updatedNotifications);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (Platform.OS === 'web') {
      // –î–ª—è –≤–µ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(notification.title, {
          body: notification.message,
          icon: '/icon.png',
          tag: newNotification.id,
        });
      }
    } else {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Alert
      Alert.alert(notification.title, notification.message);
    }

    console.log('üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.title);
  }, [settings, notifications, saveNotifications]);

  // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(async (notificationId: string) => {
    const updatedNotifications = notifications.map(n => 
      n.id === notificationId ? { ...n, read: true } : n
    );
    await saveNotifications(updatedNotifications);
  }, [notifications, saveNotifications]);

  // –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = useCallback(async () => {
    const updatedNotifications = notifications.map(n => ({ ...n, read: true }));
    await saveNotifications(updatedNotifications);
  }, [notifications, saveNotifications]);

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const deleteNotification = useCallback(async (notificationId: string) => {
    const updatedNotifications = notifications.filter(n => n.id !== notificationId);
    await saveNotifications(updatedNotifications);
  }, [notifications, saveNotifications]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const clearAllNotifications = useCallback(async () => {
    await saveNotifications([]);
  }, [saveNotifications]);

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connectWebSocket = useCallback(() => {
    // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß WebSocket disabled in development mode');
      return;
    }

    if (!currentUser?.id || wsRef.current?.readyState === WebSocket.OPEN) return;

    const wsUrl = 'wss://24dps.ru/ws'; // Production WebSocket URL
    const ws = new WebSocket(`${wsUrl}?userId=${currentUser.id}&token=${currentUser.id}`);

    ws.onopen = () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω - real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã');
      setIsConnected(true);
      reconnectAttempts.current = 0;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥ (–¥–æ –ª–∏–º–∏—Ç–∞ Cloudflare –≤ 100 —Å–µ–∫—É–Ω–¥)
      if (cloudflareReconnectRef.current) {
        clearTimeout(cloudflareReconnectRef.current);
      }
      cloudflareReconnectRef.current = setTimeout(() => {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (Cloudflare 100s limit)');
        if (wsRef.current) {
          wsRef.current.close();
        }
        connectWebSocket();
      }, 90000); // 90 —Å–µ–∫—É–Ω–¥
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        
        if (data.type === 'notification') {
          addNotification({
            type: data.notificationType,
            title: data.title,
            message: data.message,
            data: data.data,
            priority: data.priority || 'normal',
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    ws.onclose = (event) => {
      setIsConnected(false);
      
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      // –ü—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (reconnectAttempts.current < maxReconnectAttempts) {
        reconnectAttempts.current++;
        const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          connectWebSocket();
        }, delay);
      }
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ WebSocket
    };

    ws.onerror = () => {
      // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    };

    wsRef.current = ws;
  }, [currentUser?.id, addNotification]);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  const disconnectWebSocket = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    if (cloudflareReconnectRef.current) {
      clearTimeout(cloudflareReconnectRef.current);
      cloudflareReconnectRef.current = null;
    }
    
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }
    
    setIsConnected(false);
  }, []);

  // –ì–µofencing - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –ø–æ—Å—Ç–∞–º
  const checkGeofencing = useCallback(async () => {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≥–µofencing –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      return;
    }

    if (!settings.geofencing || !currentUser?.location) return;

    const userLocation = currentUser.location;
    const nearbyPosts = posts.filter(post => {
      if (!post.location) return false;
      
      const distance = calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        post.location.latitude,
        post.location.longitude
      );
      
      return distance <= settings.geofencingRadius;
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –≤ —Ä–∞–¥–∏—É—Å–µ
    for (const post of nearbyPosts) {
      const existingNotification = notifications.find(n => 
        n.type === 'geofence' && n.postId === post.id
      );
      
      if (!existingNotification) {
        await addNotification({
          type: 'geofence',
          title: 'üìç –î–ü–° —Ä—è–¥–æ–º —Å –≤–∞–º–∏',
          message: `–ù–æ–≤—ã–π –ø–æ—Å—Ç –î–ü–° –≤ ${Math.round(calculateDistance(
            userLocation.latitude,
            userLocation.longitude,
            post.location.latitude,
            post.location.longitude
          ))}–º –æ—Ç –≤–∞—Å`,
          priority: 'high',
          postId: post.id,
          location: {
            latitude: post.location.latitude,
            longitude: post.location.longitude,
            radius: settings.geofencingRadius,
          },
        });
      }
    }
  }, [settings.geofencing, settings.geofencingRadius, currentUser?.location, posts, notifications, addNotification]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371e3; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const getFilteredNotifications = useCallback((filter?: {
    type?: string;
    read?: boolean;
    limit?: number;
  }) => {
    let filtered = notifications;

    if (filter?.type) {
      filtered = filtered.filter(n => n.type === filter.type);
    }

    if (filter?.read !== undefined) {
      filtered = filtered.filter(n => n.read === filter.read);
    }

    if (filter?.limit) {
      filtered = filtered.slice(0, filter.limit);
    }

    return filtered.sort((a, b) => b.timestamp - a.timestamp);
  }, [notifications]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    loadSettings();
    loadNotifications();
  }, [loadSettings, loadNotifications]);

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  useEffect(() => {
    if (currentUser?.id && settings.enabled) {
      connectWebSocket();
    } else {
      disconnectWebSocket();
    }

    return () => {
      disconnectWebSocket();
    };
  }, [currentUser?.id, settings.enabled, connectWebSocket, disconnectWebSocket]);

  // –ì–µofencing –ø—Ä–æ–≤–µ—Ä–∫–∞
  useEffect(() => {
    if (settings.geofencing && currentUser?.location && posts.length > 0) {
      const interval = setInterval(checkGeofencing, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      return () => clearInterval(interval);
    }
  }, [settings.geofencing, currentUser?.location, posts, checkGeofencing]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    notifications,
    settings,
    isConnected,
    unreadCount,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    addNotification,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    clearAllNotifications,
    saveSettings,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getFilteredNotifications,
    connectWebSocket,
    disconnectWebSocket,
  };
}
