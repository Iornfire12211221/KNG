/**
 * üìç –ì–ï–û–§–ï–ù–°–ò–ù–ì - –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–†–ò –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ò –ö –ü–û–°–¢–ê–ú
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∏–∑–∫–∏—Ö –ø–æ—Å—Ç–∞—Ö –î–ü–°
 */

import { useState, useEffect, useCallback, useRef } from 'react';
import { Alert, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useApp } from './app-store';
import { useNotifications } from './useNotifications';

export interface GeofenceZone {
  id: string;
  postId: string;
  latitude: number;
  longitude: number;
  radius: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  title: string;
  message: string;
  entered: boolean;
  lastNotification?: number;
}

export interface GeofencingSettings {
  enabled: boolean;
  defaultRadius: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  minRadius: number;
  maxRadius: number;
  notificationCooldown: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  backgroundTracking: boolean;
  highAccuracy: boolean;
}

const DEFAULT_SETTINGS: GeofencingSettings = {
  enabled: true,
  defaultRadius: 2000, // 2–∫–º
  minRadius: 500,      // 500–º
  maxRadius: 10000,    // 10–∫–º
  notificationCooldown: 300000, // 5 –º–∏–Ω—É—Ç
  backgroundTracking: true,
  highAccuracy: true,
};

export function useGeofencing() {
  const { currentUser, posts } = useApp();
  const { addNotification } = useNotifications();
  
  const [zones, setZones] = useState<GeofenceZone[]>([]);
  const [settings, setSettings] = useState<GeofencingSettings>(DEFAULT_SETTINGS);
  const [isTracking, setIsTracking] = useState(false);
  const [currentLocation, setCurrentLocation] = useState<{
    latitude: number;
    longitude: number;
    accuracy: number;
  } | null>(null);
  
  const watchIdRef = useRef<number | null>(null);
  const lastLocationRef = useRef<{ lat: number; lng: number; timestamp: number } | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = useCallback(async () => {
    try {
      const saved = await AsyncStorage.getItem('geofencing_settings');
      if (saved) {
        const parsedSettings = JSON.parse(saved);
        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µofencing:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = useCallback(async (newSettings: Partial<GeofencingSettings>) => {
    try {
      const updatedSettings = { ...settings, ...newSettings };
      setSettings(updatedSettings);
      await AsyncStorage.setItem('geofencing_settings', JSON.stringify(updatedSettings));
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µofencing —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µofencing:', error);
    }
  }, [settings]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω
  const loadZones = useCallback(async () => {
    try {
      const saved = await AsyncStorage.getItem('geofence_zones');
      if (saved) {
        const parsedZones = JSON.parse(saved);
        setZones(parsedZones);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω –≥–µofencing:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–æ–Ω
  const saveZones = useCallback(async (newZones: GeofenceZone[]) => {
    try {
      setZones(newZones);
      await AsyncStorage.setItem('geofence_zones', JSON.stringify(newZones));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–æ–Ω –≥–µofencing:', error);
    }
  }, []);

  // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  const calculateDistance = useCallback((lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371e3; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –∏–∑ –ø–æ—Å—Ç–æ–≤
  const createZonesFromPosts = useCallback(() => {
    const newZones: GeofenceZone[] = posts
      .filter(post => post.location && post.type === 'dps')
      .map(post => ({
        id: `zone_${post.id}`,
        postId: post.id,
        latitude: post.location!.latitude,
        longitude: post.location!.longitude,
        radius: settings.defaultRadius,
        title: 'üìç –î–ü–° —Ä—è–¥–æ–º —Å –≤–∞–º–∏',
        message: `–ü–æ—Å—Ç –î–ü–° –≤ ${Math.round(settings.defaultRadius / 1000)}–∫–º –æ—Ç –≤–∞—Å`,
        entered: false,
      }));

    setZones(newZones);
    saveZones(newZones);
  }, [posts, settings.defaultRadius, saveZones]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É
  const checkZoneEntry = useCallback(async (location: { latitude: number; longitude: number }) => {
    const now = Date.now();
    
    for (const zone of zones) {
      const distance = calculateDistance(
        location.latitude,
        location.longitude,
        zone.latitude,
        zone.longitude
      );

      const isInside = distance <= zone.radius;
      const wasOutside = !zone.entered;
      const cooldownPassed = !zone.lastNotification || 
        (now - zone.lastNotification) > settings.notificationCooldown;

      if (isInside && wasOutside && cooldownPassed) {
        // –í—Ö–æ–¥–∏–º –≤ –∑–æ–Ω—É
        const updatedZones = zones.map(z => 
          z.id === zone.id 
            ? { ...z, entered: true, lastNotification: now }
            : z
        );
        setZones(updatedZones);
        saveZones(updatedZones);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await addNotification({
          type: 'geofence',
          title: zone.title,
          message: `–î–ü–° –≤ ${Math.round(distance)}–º –æ—Ç –≤–∞—Å`,
          priority: 'high',
          postId: zone.postId,
          location: {
            latitude: zone.latitude,
            longitude: zone.longitude,
            radius: zone.radius,
          },
        });

        console.log(`üìç –í—Ö–æ–¥ –≤ –∑–æ–Ω—É: ${zone.title} (${Math.round(distance)}–º)`);
      } else if (!isInside && zone.entered) {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∑–æ–Ω—ã
        const updatedZones = zones.map(z => 
          z.id === zone.id 
            ? { ...z, entered: false }
            : z
        );
        setZones(updatedZones);
        saveZones(updatedZones);

        console.log(`üìç –í—ã—Ö–æ–¥ –∏–∑ –∑–æ–Ω—ã: ${zone.title}`);
      }
    }
  }, [zones, settings.notificationCooldown, calculateDistance, addNotification, saveZones]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const getCurrentLocation = useCallback(async () => {
    if (!settings.enabled) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const { status } = await require('expo-location').requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      const location = await require('expo-location').getCurrentPositionAsync({
        accuracy: settings.highAccuracy 
          ? require('expo-location').LocationAccuracy.High
          : require('expo-location').LocationAccuracy.Balanced,
      });

      const newLocation = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        accuracy: location.coords.accuracy || 0,
      };

      setCurrentLocation(newLocation);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã
      await checkZoneEntry(newLocation);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      lastLocationRef.current = {
        lat: newLocation.latitude,
        lng: newLocation.longitude,
        timestamp: Date.now(),
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }, [settings.enabled, settings.highAccuracy, checkZoneEntry]);

  // –ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const startTracking = useCallback(async () => {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≥–µofencing –≤ development —Ä–µ–∂–∏–º–µ –∏ –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    if (process.env.NODE_ENV === 'development' || Platform.OS === 'web') {
      console.log('üîß Geofencing disabled in development mode or web platform');
      return;
    }

    if (!settings.enabled || isTracking) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const { status } = await require('expo-location').requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      await getCurrentLocation();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      const watchId = await require('expo-location').watchPositionAsync(
        {
          accuracy: settings.highAccuracy 
            ? require('expo-location').LocationAccuracy.High
            : require('expo-location').LocationAccuracy.Balanced,
          timeInterval: 10000, // 10 —Å–µ–∫—É–Ω–¥
          distanceInterval: 100, // 100 –º–µ—Ç—Ä–æ–≤
        },
        async (location) => {
          const newLocation = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            accuracy: location.coords.accuracy || 0,
          };

          setCurrentLocation(newLocation);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
          const lastLoc = lastLocationRef.current;
          if (!lastLoc || 
              calculateDistance(
                newLocation.latitude, 
                newLocation.longitude, 
                lastLoc.lat, 
                lastLoc.lng
              ) > 50) { // –ú–∏–Ω–∏–º—É–º 50 –º–µ—Ç—Ä–æ–≤

            await checkZoneEntry(newLocation);
            
            lastLocationRef.current = {
              lat: newLocation.latitude,
              lng: newLocation.longitude,
              timestamp: Date.now(),
            };
          }
        }
      );

      watchIdRef.current = watchId;
      setIsTracking(true);

      console.log('üìç –ì–µofencing –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error);
    }
  }, [settings.enabled, settings.highAccuracy, isTracking, getCurrentLocation, checkZoneEntry, calculateDistance]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const stopTracking = useCallback(() => {
    if (watchIdRef.current) {
      try {
        // –í web –æ–∫—Ä—É–∂–µ–Ω–∏–∏ stopLocationUpdatesAsync –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
        if (Platform.OS === 'web') {
          console.log('üìç Web platform: stopping location tracking by clearing watchId');
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ watchIdRef.current —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
          const taskName = typeof watchIdRef.current === 'string' ? watchIdRef.current : String(watchIdRef.current);
          require('expo-location').stopLocationUpdatesAsync(taskName);
          console.log('üìç Location tracking stopped for task:', taskName);
        }
      } catch (error) {
        console.error('‚ùå Error stopping location tracking:', error);
      }
      watchIdRef.current = null;
    }
    setIsTracking(false);
    console.log('üìç –ì–µofencing –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω—ã
  const addZone = useCallback(async (zone: Omit<GeofenceZone, 'id' | 'entered'>) => {
    const newZone: GeofenceZone = {
      ...zone,
      id: `zone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      entered: false,
    };

    const updatedZones = [...zones, newZone];
    setZones(updatedZones);
    await saveZones(updatedZones);

    console.log('üìç –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–æ–Ω–∞:', newZone.title);
  }, [zones, saveZones]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–æ–Ω—ã
  const removeZone = useCallback(async (zoneId: string) => {
    const updatedZones = zones.filter(z => z.id !== zoneId);
    setZones(updatedZones);
    await saveZones(updatedZones);

    console.log('üìç –£–¥–∞–ª–µ–Ω–∞ –∑–æ–Ω–∞:', zoneId);
  }, [zones, saveZones]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω—ã
  const updateZone = useCallback(async (zoneId: string, updates: Partial<GeofenceZone>) => {
    const updatedZones = zones.map(z => 
      z.id === zoneId ? { ...z, ...updates } : z
    );
    setZones(updatedZones);
    await saveZones(updatedZones);

    console.log('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–æ–Ω–∞:', zoneId);
  }, [zones, saveZones]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–æ–Ω
  const getNearbyZones = useCallback((location?: { latitude: number; longitude: number }) => {
    if (!location && !currentLocation) return [];

    const loc = location || currentLocation!;
    
    return zones
      .map(zone => ({
        ...zone,
        distance: calculateDistance(
          loc.latitude,
          loc.longitude,
          zone.latitude,
          zone.longitude
        ),
      }))
      .sort((a, b) => a.distance - b.distance);
  }, [zones, currentLocation, calculateDistance]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    loadSettings();
    loadZones();
  }, [loadSettings, loadZones]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤
  useEffect(() => {
    if (posts.length > 0) {
      createZonesFromPosts();
    }
  }, [posts, createZonesFromPosts]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
  useEffect(() => {
    if (settings.enabled && currentUser?.id) {
      startTracking();
    } else {
      stopTracking();
    }

    return () => {
      stopTracking();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [settings.enabled, currentUser?.id]); // –£–±—Ä–∞–ª–∏ startTracking –∏ stopTracking –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    zones,
    settings,
    isTracking,
    currentLocation,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    startTracking,
    stopTracking,
    addZone,
    removeZone,
    updateZone,
    saveSettings,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getNearbyZones,
    calculateDistance,
  };
}
