/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ö–∏–Ω–≥–∏—Å–µ–ø–ø)
 */

import { prisma } from './prisma';

export interface ModerationResult {
  decision: 'APPROVED' | 'REJECTED' | 'FLAGGED';
  confidence: number;
  reasoning: string;
  toxicityScore?: number;
  relevanceScore?: number;
  severityScore?: number;
  categoryScore?: number;
  detectedLanguage?: string;
  keyPhrases?: string[];
  entities?: string[];
  processingTime?: number;
}

export interface PostAnalysis {
  type: string;
  description: string;
  severity: string;
  hasPhoto: boolean;
  photo?: string; // Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  location?: string;
}

export class EnhancedAIModeration {
  private static readonly API_URL = 'https://toolkit.rork.com/text/llm/';
  private static readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –∫—ç—à
  private static cache = new Map<string, { result: ModerationResult; timestamp: number }>();

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –£–ú–ù–û–ô –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º
   */
  static async moderatePost(post: PostAnalysis): Promise<ModerationResult> {
    const startTime = Date.now();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = this.generateCacheKey(post);
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        console.log(`üéØ Cache hit for post moderation`);
        return cached;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      const result = await this.performMultiLevelAnalysis(post);
      
      // üß† –£–ú–ù–û–ï –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï - –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
      const smartResult = await this.applySmartLearning(post, result);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.setCache(cacheKey, smartResult);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveModerationResult(post, smartResult);
      
      const processingTime = Date.now() - startTime;
      smartResult.processingTime = processingTime;
      
      console.log(`üß† SMART Post moderated: ${smartResult.decision} (${processingTime}ms, confidence: ${smartResult.confidence})`);
      
      return smartResult;
      
    } catch (error) {
      console.error('‚ùå SMART AI moderation error:', error);
      
      // Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
      return this.fallbackModeration(post);
    }
  }

  /**
   * –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞
   */
  private static async performMultiLevelAnalysis(post: PostAnalysis): Promise<ModerationResult> {
    // –£—Ä–æ–≤–µ–Ω—å 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
    const toxicityCheck = await this.checkToxicity(post.description);
    if (toxicityCheck.toxicityScore > 0.8) {
      return {
        decision: 'REJECTED',
        confidence: 0.9,
        reasoning: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        toxicityScore: toxicityCheck.toxicityScore,
        relevanceScore: 0.1,
        severityScore: 0.1,
        categoryScore: 0.1,
        detectedLanguage: toxicityCheck.language,
        keyPhrases: toxicityCheck.keyPhrases,
        entities: []
      };
    }

    // –£—Ä–æ–≤–µ–Ω—å 2: –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π
    const relevanceCheck = await this.checkRelevance(post);
    if (relevanceCheck.relevanceScore < 0.3) {
      return {
        decision: 'REJECTED',
        confidence: 0.8,
        reasoning: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ—Ä–æ–∂–Ω—ã–º –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è–º',
        toxicityScore: toxicityCheck.toxicityScore,
        relevanceScore: relevanceCheck.relevanceScore,
        severityScore: 0.1,
        categoryScore: 0.1,
        detectedLanguage: toxicityCheck.language,
        keyPhrases: [...toxicityCheck.keyPhrases, ...relevanceCheck.keyPhrases],
        entities: relevanceCheck.entities
      };
    }

    // –£—Ä–æ–≤–µ–Ω—å 3: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let imageAnalysis = null;
    if (post.hasPhoto && post.photo) {
      imageAnalysis = await this.analyzeImage(post.photo, post.type, post.description);
      
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è–≤–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ, –æ—Ç–∫–ª–æ–Ω—è–µ–º
      if (imageAnalysis && imageAnalysis.relevanceScore < 0.2) {
        return {
          decision: 'REJECTED',
          confidence: 0.9,
          reasoning: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Ä–æ–∂–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ',
          toxicityScore: toxicityCheck.toxicityScore,
          relevanceScore: imageAnalysis.relevanceScore,
          severityScore: 0.1,
          categoryScore: 0.1,
          detectedLanguage: toxicityCheck.language,
          keyPhrases: [...toxicityCheck.keyPhrases, ...relevanceCheck.keyPhrases],
          entities: relevanceCheck.entities
        };
      }
    }

    // –£—Ä–æ–≤–µ–Ω—å 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    const detailedAnalysis = await this.performDetailedAnalysis(post);
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    const decision = this.makeDecision({
      toxicity: toxicityCheck.toxicityScore,
      relevance: relevanceCheck.relevanceScore,
      severity: detailedAnalysis.severityScore,
      category: detailedAnalysis.categoryScore,
      imageRelevance: imageAnalysis?.relevanceScore || 1.0
    });

    return {
      decision: decision.decision,
      confidence: decision.confidence,
      reasoning: decision.reasoning,
      toxicityScore: toxicityCheck.toxicityScore,
      relevanceScore: relevanceCheck.relevanceScore,
      severityScore: detailedAnalysis.severityScore,
      categoryScore: detailedAnalysis.categoryScore,
      detectedLanguage: toxicityCheck.language,
      keyPhrases: [...toxicityCheck.keyPhrases, ...relevanceCheck.keyPhrases, ...detailedAnalysis.keyPhrases],
      entities: [...relevanceCheck.entities, ...detailedAnalysis.entities]
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private static async checkToxicity(text: string): Promise<{
    toxicityScore: number;
    language: string;
    keyPhrases: string[];
  }> {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫:

–¢–µ–∫—Å—Ç: "${text}"

–û—Ü–µ–Ω–∏:
1. –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (0-1): –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏
2. –Ø–∑—ã–∫: ru/en/other
3. –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã: –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "toxicityScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
  "language": "ru",
  "keyPhrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"]
}

–ü—Ä–∞–≤–∏–ª–∞:
- 0.0-0.3: –ù–∏–∑–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
- 0.3-0.7: –°—Ä–µ–¥–Ω—è—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å  
- 0.7-1.0: –í—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
`;

    const response = await this.callAI(prompt);
    return JSON.parse(response);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π
   */
  private static async checkRelevance(post: PostAnalysis): Promise<{
    relevanceScore: number;
    keyPhrases: string[];
    entities: string[];
  }> {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ—Ä–æ–∂–Ω—ã–º –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è–º –≤ –ö–∏–Ω–≥–∏—Å–µ–ø–ø–µ:

–¢–∏–ø: ${post.type}
–û–ø–∏—Å–∞–Ω–∏–µ: ${post.description}
–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${post.severity}
–§–æ—Ç–æ: ${post.hasPhoto ? '–î–∞' : '–ù–µ—Ç'}
–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${post.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-1) –∏ –≤—ã–¥–µ–ª–∏:
1. –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –æ –¥–æ—Ä–æ–≥–µ/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
2. –°—É—â–Ω–æ—Å—Ç–∏: –º–µ—Å—Ç–∞, —Å–æ–±—ã—Ç–∏—è, –æ–±—ä–µ–∫—Ç—ã

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "relevanceScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
  "keyPhrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"],
  "entities": ["–º–µ—Å—Ç–æ1", "—Å–æ–±—ã—Ç–∏–µ1"]
}

–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã:
- –î–ü–°, –ø–æ–ª–∏—Ü–∏—è, –ø–∞—Ç—Ä—É–ª—å
- –î–¢–ü, –∞–≤–∞—Ä–∏–∏, —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
- –ö–∞–º–µ—Ä—ã, —Ä–∞–¥–∞—Ä—ã, –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
- –î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ä–µ–º–æ–Ω—Ç
- –ü—Ä–æ–±–∫–∏, –∑–∞—Ç–æ—Ä—ã
- –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –¥–æ—Ä–æ–≥–µ
- –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
- –ó–Ω–∞–∫–∏, —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã
`;

    const response = await this.callAI(prompt);
    return JSON.parse(response);
  }

  /**
   * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private static async performDetailedAnalysis(post: PostAnalysis): Promise<{
    severityScore: number;
    categoryScore: number;
    keyPhrases: string[];
    entities: string[];
  }> {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:

–¢–∏–ø: ${post.type}
–û–ø–∏—Å–∞–Ω–∏–µ: ${post.description}
–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${post.severity}

–û—Ü–µ–Ω–∏:
1. –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (0-1): –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ
2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (0-1): –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "severityScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
  "categoryScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
  "keyPhrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"],
  "entities": ["—Å—É—â–Ω–æ—Å—Ç—å1", "—Å—É—â–Ω–æ—Å—Ç—å2"]
}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:
- 0.0-0.3: –ù–∏–∑–∫–∞—è (–æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã –î–ü–°, –∫–∞–º–µ—Ä—ã)
- 0.3-0.7: –°—Ä–µ–¥–Ω—è—è (–ø—Ä–æ–±–∫–∏, —Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥)
- 0.7-1.0: –í—ã—Å–æ–∫–∞—è (–î–¢–ü, —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏)
`;

    const response = await this.callAI(prompt);
    return JSON.parse(response);
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  private static makeDecision(scores: {
    toxicity: number;
    relevance: number;
    severity: number;
    category: number;
    imageRelevance?: number;
  }): { decision: 'APPROVED' | 'REJECTED' | 'FLAGGED'; confidence: number; reasoning: string } {
    
    // –í—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å = –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    if (scores.toxicity > 0.7) {
      return {
        decision: 'REJECTED',
        confidence: 0.9,
        reasoning: '–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'
      };
    }

    // –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å = –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    if (scores.relevance < 0.3) {
      return {
        decision: 'REJECTED',
        confidence: 0.8,
        reasoning: '–ù–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ—Ä–æ–∂–Ω—ã–º –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è–º'
      };
    }

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è
    const imageRelevance = scores.imageRelevance || 1.0;
    const combinedRelevance = (scores.relevance + imageRelevance) / 2;

    // –í—ã—Å–æ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å + –Ω–∏–∑–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å = –æ–¥–æ–±—Ä–µ–Ω–∏–µ
    if (combinedRelevance > 0.7 && scores.toxicity < 0.3) {
      let reasoning = '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏';
      if (scores.imageRelevance && scores.imageRelevance < 0.8) {
        reasoning += ' (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)';
      }
      return {
        decision: 'APPROVED',
        confidence: 0.9,
        reasoning
      };
    }

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ, –æ—Ç–∫–ª–æ–Ω—è–µ–º
    if (scores.imageRelevance && scores.imageRelevance < 0.3) {
      return {
        decision: 'REJECTED',
        confidence: 0.8,
        reasoning: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Ä–æ–∂–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ'
      };
    }

    // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ = —Ñ–ª–∞–≥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (combinedRelevance > 0.5 && scores.toxicity < 0.5) {
      return {
        decision: 'FLAGGED',
        confidence: 0.6,
        reasoning: '–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞'
      };
    }

    // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏
    return {
      decision: 'FLAGGED',
      confidence: 0.5,
      reasoning: '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
    };
  }

  /**
   * Fallback –º–æ–¥–µ—Ä–∞—Ü–∏—è –±–µ–∑ –ò–ò
   */
  private static fallbackModeration(post: PostAnalysis): ModerationResult {
    const lowerText = post.description.toLowerCase();
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const roadKeywords = [
      '–¥—Ç–ø', '–∞–≤–∞—Ä–∏—è', '–ø—Ä–æ–±–∫–∞', '–¥–ø—Å', '–ø–æ–ª–∏—Ü–∏—è', '–∫–∞–º–µ—Ä–∞', '–¥–æ—Ä–æ–≥–∞', 
      '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–ø–∞—Ç—Ä—É–ª—å',
      '—Ä–µ–º–æ–Ω—Ç', '—Ä–∞–±–æ—Ç–∞', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Å–Ω–µ–≥', '–¥–æ–∂–¥—å', '—Ç—É–º–∞–Ω'
    ];
    const relevanceScore = roadKeywords.some(keyword => lowerText.includes(keyword)) ? 0.8 : 0.3;
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
    const toxicKeywords = ['–±–ª—è—Ç—å', '—Å—É–∫–∞', '—Ö—É–π', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞'];
    const toxicityScore = toxicKeywords.some(keyword => lowerText.includes(keyword)) ? 0.9 : 0.1;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    const severityKeywords = ['–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '—Å–∫–æ—Ä–∞—è', '–ø–æ–∂–∞—Ä', '—Ä–∞–Ω–µ–Ω', '—É–±–∏—Ç'];
    const severityScore = severityKeywords.some(keyword => lowerText.includes(keyword)) ? 0.9 : 0.5;
    
    // –†–µ—à–µ–Ω–∏–µ
    let decision: 'APPROVED' | 'REJECTED' | 'FLAGGED' = 'FLAGGED';
    if (relevanceScore > 0.7 && toxicityScore < 0.3) {
      decision = 'APPROVED';
    } else if (toxicityScore > 0.7 || relevanceScore < 0.3) {
      decision = 'REJECTED';
    }
    
    return {
      decision,
      confidence: 0.6,
      reasoning: 'Fallback moderation based on keyword analysis',
      toxicityScore,
      relevanceScore,
      severityScore,
      categoryScore: 0.7,
      detectedLanguage: 'ru',
      keyPhrases: [],
      entities: []
    };
  }

  /**
   * –í—ã–∑–æ–≤ –ò–ò API
   */
  private static async callAI(prompt: string): Promise<string> {
    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π –≤ –ö–∏–Ω–≥–∏—Å–µ–ø–ø–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
            },
            {
              role: 'user',
              content: prompt
            }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`AI API error: ${response.status}`);
      }

      const data = await response.json();
      let content = data.completion || data.content || data.message || '';
      
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON
      content = content.trim();
      
      // –£–±–∏—Ä–∞–µ–º markdown –∫–æ–¥ –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (content.startsWith('```json')) {
        content = content.replace(/```json\s*/, '').replace(/```\s*$/, '');
      } else if (content.startsWith('```')) {
        content = content.replace(/```\s*/, '').replace(/```\s*$/, '');
      }
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
      content = content.replace(/^[^{]*/, '').replace(/[^}]*$/, '');
      
      // –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
      try {
        JSON.parse(content);
        return content;
      } catch (parseError) {
        console.warn('AI returned invalid JSON, using fallback:', content);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback JSON –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return JSON.stringify({
          toxicityScore: 0.1,
          language: 'ru',
          isRelevant: true,
          relevanceScore: 0.8,
          severityScore: 0.5,
          categoryScore: 0.7,
          keyPhrases: [],
          entities: []
        });
      }
    } catch (error) {
      console.error('AI API call failed:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private static async saveModerationResult(post: PostAnalysis, result: ModerationResult) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
      const dbPost = await prisma.post.findFirst({
        where: {
          description: post.description,
          type: post.type as any
        },
        orderBy: { createdAt: 'desc' }
      });

      if (dbPost) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        await prisma.post.update({
          where: { id: dbPost.id },
          data: {
            moderationStatus: result.decision as any,
            moderationScore: result.confidence,
            moderationReason: result.reasoning,
            moderatedAt: BigInt(Date.now()),
            moderatedBy: 'AI',
            needsModeration: result.decision === 'FLAGGED',
            relevanceScore: result.relevanceScore,
            relevanceCheckedAt: BigInt(Date.now())
          }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await prisma.aIModeration.create({
          data: {
            postId: dbPost.id,
            content: post.description,
            toxicityScore: result.toxicityScore,
            relevanceScore: result.relevanceScore,
            severityScore: result.severityScore,
            categoryScore: result.categoryScore,
            detectedLanguage: result.detectedLanguage,
            keyPhrases: result.keyPhrases || [],
            entities: result.entities || [],
            decision: result.decision as any,
            confidence: result.confidence,
            reasoning: result.reasoning
          }
        });
      }
    } catch (error) {
      console.error('Error saving moderation result:', error);
    }
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private static generateCacheKey(post: PostAnalysis): string {
    return `${post.type}_${post.description.substring(0, 50)}_${post.severity}`;
  }

  private static getFromCache(key: string): ModerationResult | null {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    if (Date.now() - cached.timestamp > this.CACHE_TTL) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.result;
  }

  private static setCache(key: string, result: ModerationResult) {
    this.cache.set(key, {
      result,
      timestamp: Date.now()
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
   */
  static async getModerationStats() {
    try {
      const stats = await prisma.aIModeration.groupBy({
        by: ['decision'],
        _count: {
          decision: true
        },
        _avg: {
          confidence: true,
          toxicityScore: true,
          relevanceScore: true
        }
      });

      const total = await prisma.aIModeration.count();
      
      return {
        total,
        byDecision: stats.reduce((acc, stat) => {
          acc[stat.decision] = {
            count: stat._count.decision,
            avgConfidence: stat._avg.confidence || 0,
            avgToxicity: stat._avg.toxicityScore || 0,
            avgRelevance: stat._avg.relevanceScore || 0
          };
          return acc;
        }, {} as Record<string, any>)
      };
    } catch (error) {
      console.error('Error getting moderation stats:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
   */
  static async moderatePendingPosts() {
    try {
      const pendingPosts = await prisma.post.findMany({
        where: {
          moderationStatus: 'PENDING',
          needsModeration: true
        },
        take: 10 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∑–∞ —Ä–∞–∑
      });

      console.log(`ü§ñ Starting AI moderation for ${pendingPosts.length} posts`);

      for (const post of pendingPosts) {
        try {
          const analysis: PostAnalysis = {
            type: post.type,
            description: post.description,
            severity: post.severity,
            hasPhoto: !!post.photo,
            photo: post.photo || undefined,
            location: post.address || post.landmark
          };

          const result = await this.moderatePost(analysis);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.error(`Error moderating post ${post.id}:`, error);
        }
      }

      console.log(`‚úÖ AI moderation batch completed`);
    } catch (error) {
      console.error('Error in batch moderation:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async analyzeImage(imageBase64: string, postType: string, description?: string): Promise<{ relevanceScore: number; keyPhrases: string[]; entities: string[] } | null> {
    try {
      console.log('üñºÔ∏è Analyzing image for post type:', postType);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ –¥–∞—Ç—É
      const now = new Date();
      const currentHour = now.getHours();
      const currentMinute = now.getMinutes();
      const currentDate = now.toLocaleDateString('ru-RU');
      const currentTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
      let timeOfDay: string;
      if (currentHour >= 6 && currentHour < 12) {
        timeOfDay = '—É—Ç—Ä–æ';
      } else if (currentHour >= 12 && currentHour < 18) {
        timeOfDay = '–¥–µ–Ω—å';
      } else if (currentHour >= 18 && currentHour < 22) {
        timeOfDay = '–≤–µ—á–µ—Ä';
      } else {
        timeOfDay = '–Ω–æ—á—å';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω
      const month = now.getMonth() + 1;
      let season: string;
      if (month >= 3 && month <= 5) {
        season = '–≤–µ—Å–Ω–∞';
      } else if (month >= 6 && month <= 8) {
        season = '–ª–µ—Ç–æ';
      } else if (month >= 9 && month <= 11) {
        season = '–æ—Å–µ–Ω—å';
      } else {
        season = '–∑–∏–º–∞';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
      const getThemeExpectations = (type: string) => {
        switch (type) {
          case 'roadwork':
            return {
              name: '–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
              expected: '–¥–æ—Ä–æ–∂–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (—ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã, –∞—Å—Ñ–∞–ª—å—Ç–æ—É–∫–ª–∞–¥—á–∏–∫–∏, –∫–∞—Ç–∫–∏, –≥—Ä—É–∑–æ–≤–∏–∫–∏, –∫—Ä–∞–Ω—ã), —Ä–∞–±–æ—á–∏–µ –≤ —Å–ø–µ—Ü–æ–¥–µ–∂–¥–µ, –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è, –∫–æ–Ω—É—Å—ã, –∑–Ω–∞–∫–∏ "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", —Å–≤–µ–∂–∏–π –∞—Å—Ñ–∞–ª—å—Ç, —Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∂–µ–ª—Ç–∞—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞'
            };
          case 'other':
            return {
              name: '–û—Å—Ç–∞–ª—å–Ω–æ–µ (–ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)',
              expected: '—è–º—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, —Å–ª–æ–º–∞–Ω–Ω—ã–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º, —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –±–æ—Ä–¥—é—Ä—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–µ–Ω–∞–∂–µ–º'
            };
          case 'dps':
            return {
              name: '–î–ü–°/–ü–∞—Ç—Ä—É–ª—å',
              expected: '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –î–ü–°, —Ä–∞–¥–∞—Ä—ã, –∫–∞–º–µ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ—Å—Ç—ã –ì–ò–ë–î–î, –ø–∞—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã'
            };
          case 'accident':
            return {
              name: '–î–¢–ü',
              expected: '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, —Å–ª–µ–¥—ã –∞–≤–∞—Ä–∏–∏, —ç–≤–∞–∫—É–∞—Ç–æ—Ä—ã, —Å–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å, –ø–æ–∂–∞—Ä–Ω—ã–µ, –ø–æ–ª–∏—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ –î–¢–ü'
            };
          case 'camera':
            return {
              name: '–ö–∞–º–µ—Ä—ã',
              expected: '–∫–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, —Ä–∞–¥–∞—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è'
            };
          case 'animals':
            return {
              name: '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
              expected: '–∂–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏ –∏–ª–∏ —Ä—è–¥–æ–º —Å –¥–æ—Ä–æ–≥–æ–π (–ª–æ—Å–∏, –∫–∞–±–∞–Ω—ã, —Å–æ–±–∞–∫–∏, –∫–æ—à–∫–∏ –∏ –¥—Ä.)'
            };
          default:
            return {
              name: '–î–æ—Ä–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
              expected: '–ª—é–±–∞—è –¥–æ—Ä–æ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            };
        }
      };
      
      const themeInfo = getThemeExpectations(postType);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: `–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ –ö–∏–Ω–≥–∏—Å–µ–ø–ø, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å.

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ (–∂–µ–ª—Ç—ã–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏, —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã, –∫—Ä–∞–Ω—ã) - —ç—Ç–æ –í–°–ï–ì–î–ê –¥–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –¥–∞–∂–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è!

–°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò:
- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime} (${timeOfDay})
- –î–∞—Ç–∞: ${currentDate}
- –°–µ–∑–æ–Ω: ${season}
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ö–∏–Ω–≥–∏—Å–µ–ø–ø, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å

–¢–ï–ú–ê–¢–ò–ö–ê –ü–û–°–¢–ê: ${themeInfo.name}
–û–ñ–ò–î–ê–ï–ú–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï: ${themeInfo.expected}
${description ? `–û–ü–ò–°–ê–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ${description}` : '–û–ü–ò–°–ê–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–ï–¢'}

–ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê:
1. –°–ü–ï–¶–¢–ï–•–ù–ò–ö–ê = –î–û–†–û–ñ–ù–´–ï –†–ê–ë–û–¢–´:
   - –ñ–µ–ª—Ç—ã–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏, —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã, –∫—Ä–∞–Ω—ã = –¥–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
   - –î–∞–∂–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—ã
   - –¢–µ—Ö–Ω–∏–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω–æ

2. –ë–ï–ó –û–ü–ò–°–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ò–†–£–ô –í–ò–ó–£–ê–õ–¨–ù–û:
   - –ò—â–∏ –∫–ª—é—á–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ
   - –°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞, –î–ü–°, –∫–∞–º–µ—Ä—ã, –∂–∏–≤–æ—Ç–Ω—ã–µ - –≤—Å—ë –≤–∞–∂–Ω–æ
   - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–π –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º

3. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):
   - –°—Ä–∞–≤–Ω–∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
   - –ï—Å–ª–∏ —Å–µ–π—á–∞—Å ${timeOfDay} (${currentTime}), —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
   - –û–¢–ö–õ–û–ù–Ø–ô —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å—ä–µ–º–∫–∏ —è–≤–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
   - –î–Ω–µ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –≤–µ—á–µ—Ä–æ–º/–Ω–æ—á—å—é = MODERATE
   - –ù–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –¥–Ω–µ–º = MODERATE

4. –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï:
   - –î–ª—è "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": –ª—é–±–∞—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞, —Ä–∞–±–æ—á–∏–µ, —Ä–µ–º–æ–Ω—Ç
   - –î–ª—è "–û—Å—Ç–∞–ª—å–Ω–æ–µ": –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–π —Ç–µ–º—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É

–û–î–û–ë–†–Ø–ô (APPROVE) –µ—Å–ª–∏:
- –ï—Å—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ (–¥–∞–∂–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
- –ï—Å—Ç—å –¥–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∏
- –ï—Å—Ç—å –î–ü–°, –∫–∞–º–µ—Ä—ã, –∂–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –¥–æ—Ä–æ–≥–µ
- –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Ä–æ–≥–æ–π (—è–º—ã, –ø–æ–ª–æ–º–∫–∏)
- –§–æ—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π
- –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

–û–¢–ö–õ–û–ù–Ø–ô (MODERATE) –µ—Å–ª–∏:
- –°–æ–≤—Å–µ–º –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ—Ä–æ–≥–æ–π
- –Ø–≤–Ω—ã–π —Å–ø–∞–º –∏–ª–∏ –æ—Ñ—Ñ—Ç–æ–ø
- –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ –∏ —Ç.–ø.)
- –í—Ä–µ–º—è —Å—ä–µ–º–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–¥–Ω–µ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –≤–µ—á–µ—Ä–æ–º/–Ω–æ—á—å—é –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "decision": "APPROVE" –∏–ª–∏ "MODERATE",
  "relevanceScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
  "keyPhrases": ["–∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã"],
  "entities": ["–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"]
}`
            },
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–í–ê–ñ–ù–û: –°–µ–π—á–∞—Å ${currentTime} (${timeOfDay}). –ü—Ä–æ–≤–µ—Ä—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!

${description ? `–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${description}"` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ'}

–¢–µ–º–∞—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞: ${themeInfo.name}
–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${themeInfo.expected}

–ü–û–†–Ø–î–û–ö –ü–†–û–í–ï–†–ö–ò:
1. –ü–†–û–í–ï–†–¨ –í–†–ï–ú–Ø: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (${timeOfDay})?
2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ
3. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É - —ç—Ç–æ –¥–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å –≤—Ä–µ–º—è!
4. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ—Ä–æ–∂–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ
5. –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
6. –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: decision, relevanceScore, reasoning, keyPhrases, entities.`
                },
                {
                  type: 'image',
                  image: imageBase64
                }
              ]
            }
          ]
        })
      });

      if (!response.ok) {
        console.log('Image analysis failed: Response not OK');
        return null;
      }

      const data = await response.json();
      let content = data.completion || data.content || data.message || '';
      
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON
      content = content.trim();
      
      // –£–±–∏—Ä–∞–µ–º markdown –∫–æ–¥ –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (content.startsWith('```json')) {
        content = content.replace(/```json\s*/, '').replace(/```\s*$/, '');
      } else if (content.startsWith('```')) {
        content = content.replace(/```\s*/, '').replace(/```\s*$/, '');
      }
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
      content = content.replace(/^[^{]*/, '').replace(/[^}]*$/, '');
      
      // –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
      try {
        const result = JSON.parse(content);
        console.log('üñºÔ∏è Image analysis result:', result);
        
        return {
          relevanceScore: result.relevanceScore || 0.5,
          keyPhrases: result.keyPhrases || [],
          entities: result.entities || []
        };
      } catch (parseError) {
        console.warn('AI returned invalid JSON for image analysis, using fallback:', content);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
          relevanceScore: 0.5,
          keyPhrases: [],
          entities: []
        };
      }
    } catch (error) {
      console.error('Error analyzing image:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
   */
  private static async applySmartLearning(post: PostAnalysis, baseResult: ModerationResult): Promise<ModerationResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      const smartDecision = await this.getSmartDecision(
        baseResult.decision === 'APPROVED' ? 'approve' : 'reject',
        baseResult.confidence,
        post.type,
        post.hasPhoto,
        post.description
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const smartResult: ModerationResult = {
        ...baseResult,
        decision: smartDecision.decision === 'approve' ? 'APPROVED' : 'REJECTED',
        confidence: smartDecision.confidence,
        reasoning: smartDecision.reasoning || baseResult.reasoning
      };

      console.log('üß† Applied smart learning:', {
        original: baseResult.decision,
        smart: smartResult.decision,
        confidence: (smartResult.confidence * 100).toFixed(1) + '%',
        reasoning: smartDecision.reasoning
      });

      return smartResult;
    } catch (error) {
      console.error('‚ùå Error applying smart learning:', error);
      return baseResult; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
   */
  private static async getSmartDecision(
    baseDecision: 'approve' | 'reject',
    confidence: number,
    postType: string,
    hasPhoto: boolean,
    description?: string
  ): Promise<{ decision: 'approve' | 'reject'; confidence: number; reasoning?: string }> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–º–Ω—É—é –º–æ–¥–µ–ª—å
      const [smartModelStr, patternsStr] = await Promise.all([
        this.getFromStorage('ai_smart_model'),
        this.getFromStorage('ai_smart_patterns')
      ]);

      if (!smartModelStr || !patternsStr) {
        return { decision: baseDecision, confidence, reasoning: 'No smart model available' };
      }

      const smartModel = JSON.parse(smartModelStr);
      const patterns = JSON.parse(patternsStr);
      const now = new Date();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ —Å–µ–∑–æ–Ω
      const hour = now.getHours();
      const timeOfDay = hour >= 6 && hour < 12 ? 'morning' : 
                       hour >= 12 && hour < 18 ? 'day' : 
                       hour >= 18 && hour < 22 ? 'evening' : 'night';
      
      const month = now.getMonth() + 1;
      const season = month >= 3 && month <= 5 ? 'spring' : 
                    month >= 6 && month <= 8 ? 'summer' : 
                    month >= 9 && month <= 11 ? 'autumn' : 'winter';

      console.log('üß† Using SMART AI decision making...');

      // –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó —Å –≤–µ—Å–∞–º–∏
      let smartScore = 0;
      let totalWeight = 0;
      const reasoning: string[] = [];

      // 1. –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–≤–µ—Å 0.2)
      if (patterns.timePatterns[timeOfDay]) {
        const timeConfidence = patterns.timePatterns[timeOfDay].confidence || 0.5;
        smartScore += timeConfidence * smartModel.weights.timeWeight;
        totalWeight += smartModel.weights.timeWeight;
        reasoning.push(`Time: ${(timeConfidence * 100).toFixed(1)}%`);
      }

      // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞ (–≤–µ—Å 0.3)
      if (patterns.typePatterns[postType]) {
        const typeConfidence = patterns.typePatterns[postType].confidence || 0.5;
        smartScore += typeConfidence * smartModel.weights.typeWeight;
        totalWeight += smartModel.weights.typeWeight;
        reasoning.push(`Type: ${(typeConfidence * 100).toFixed(1)}%`);
      }

      // 3. –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–æ—Ç–æ (–≤–µ—Å 0.2)
      const photoKey = hasPhoto ? 'withPhoto' : 'withoutPhoto';
      if (patterns.photoPatterns[photoKey].total > 0) {
        const photoConfidence = patterns.photoPatterns[photoKey].confidence || 0.5;
        smartScore += photoConfidence * smartModel.weights.photoWeight;
        totalWeight += smartModel.weights.photoWeight;
        reasoning.push(`Photo: ${(photoConfidence * 100).toFixed(1)}%`);
      }

      // 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–µ—Å 0.15)
      const context = `${timeOfDay}_${postType}_${hasPhoto ? 'photo' : 'no_photo'}`;
      if (patterns.contextPatterns[context]) {
        const contextConfidence = patterns.contextPatterns[context].correct / patterns.contextPatterns[context].total;
        smartScore += contextConfidence * smartModel.weights.contextWeight;
        totalWeight += smartModel.weights.contextWeight;
        reasoning.push(`Context: ${(contextConfidence * 100).toFixed(1)}%`);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —É–º–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      const smartConfidence = totalWeight > 0 ? smartScore / totalWeight : confidence;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
      let finalDecision = baseDecision;
      let finalConfidence = smartConfidence;

      if (smartConfidence >= smartModel.thresholds.approveThreshold) {
        finalDecision = 'approve';
        finalConfidence = Math.min(smartConfidence, 0.95);
      } else if (smartConfidence <= smartModel.thresholds.rejectThreshold) {
        finalDecision = 'reject';
        finalConfidence = Math.max(1 - smartConfidence, 0.05);
      }

      return { 
        decision: finalDecision, 
        confidence: finalConfidence,
        reasoning: `Smart: ${reasoning.join(', ')}`
      };
    } catch (error) {
      console.error('‚ùå Error getting smart decision:', error);
      return { decision: baseDecision, confidence, reasoning: 'Smart analysis failed' };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  private static async getFromStorage(key: string): Promise<string | null> {
    try {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage, –≤ React Native - AsyncStorage
      if (typeof window !== 'undefined' && window.localStorage) {
        return window.localStorage.getItem(key);
      }
      return null;
    } catch (error) {
      console.error('Error getting from storage:', error);
      return null;
    }
  }
}
