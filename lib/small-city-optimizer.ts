/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ö–∏–Ω–≥–∏—Å–µ–ø–ø–∞ –∏ –ø–æ–¥–æ–±–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
 */

import { prisma } from './prisma';

export class SmallCityOptimizer {
  private static readonly MAX_USERS = 50; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  private static readonly CACHE_TTL = 60000; // 1 –º–∏–Ω—É—Ç–∞ –∫—ç—à
  private static readonly BATCH_SIZE = 5; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  
  private static cache = new Map<string, { data: any; timestamp: number }>();

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  static clearCache() {
    this.cache.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  private static getFromCache<T>(key: string): T | null {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    if (Date.now() - cached.timestamp > this.CACHE_TTL) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
   */
  private static setCache<T>(key: string, data: T) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã (–¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞)
   */
  static async getOptimizedPosts(bounds: {
    northEast: { latitude: number; longitude: number };
    southWest: { latitude: number; longitude: number };
  }) {
    const cacheKey = `posts_${JSON.stringify(bounds)}`;
    const cached = this.getFromCache(cacheKey);
    if (cached) return cached;

    const now = Date.now();
    
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const posts = await prisma.post.findMany({
      where: {
        AND: [
          { expiresAt: { gt: now } },
          { needsModeration: false }, // –¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
          { latitude: { gte: bounds.southWest.latitude, lte: bounds.northEast.latitude } },
          { longitude: { gte: bounds.southWest.longitude, lte: bounds.northEast.longitude } },
        ]
      },
      orderBy: { timestamp: 'desc' },
      take: 30, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      select: {
        id: true,
        description: true,
        latitude: true,
        longitude: true,
        type: true,
        severity: true,
        timestamp: true,
        userName: true,
        likes: true,
        likedBy: true,
        photos: true,
        address: true,
        landmark: true,
        moderationStatus: true,
        moderationScore: true,
        moderationReason: true,
        viewCount: true,
        verifiedBy: true,
      }
    });

    this.setCache(cacheKey, posts);
    return posts;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  static async getOptimizedStats() {
    const cacheKey = 'stats';
    const cached = this.getFromCache(cacheKey);
    if (cached) return cached;

    const now = Date.now();
    
    const [total, byType, bySeverity, activeUsers] = await Promise.all([
      prisma.post.count({
        where: { expiresAt: { gt: now } }
      }),
      prisma.post.groupBy({
        by: ['type'],
        where: { expiresAt: { gt: now } },
        _count: { type: true }
      }),
      prisma.post.groupBy({
        by: ['severity'],
        where: { expiresAt: { gt: now } },
        _count: { severity: true }
      }),
      prisma.user.count({
        where: { 
          isBanned: false,
          isKicked: false 
        }
      })
    ]);

    const stats = {
      total,
      byType: byType.reduce((acc, item) => {
        acc[item.type] = item._count.type;
        return acc;
      }, {} as Record<string, number>),
      bySeverity: bySeverity.reduce((acc, item) => {
        acc[item.severity] = item._count.severity;
        return acc;
      }, {} as Record<string, number>),
      activeUsers,
      maxUsers: this.MAX_USERS,
      utilizationPercent: Math.round((activeUsers / this.MAX_USERS) * 100),
      citySize: 'small',
      recommendations: this.getCityRecommendations(activeUsers, total)
    };

    this.setCache(cacheKey, stats);
    return stats;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  private static getCityRecommendations(activeUsers: number, totalPosts: number) {
    const recommendations = [];

    if (activeUsers < 10) {
      recommendations.push('–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ –º–µ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö');
    }

    if (totalPosts < 5) {
      recommendations.push('–ú–∞–ª–æ –ø–æ—Å—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    if (activeUsers > 30) {
      recommendations.push('–•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ');
    }

    recommendations.push('–î–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã');

    return recommendations;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  static async cleanupForSmallCity() {
    const now = Date.now();
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    const expiredPosts = await prisma.post.deleteMany({
      where: {
        expiresAt: { lt: now }
      }
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞)
    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
    const expiredModeration = await prisma.aIModeration.deleteMany({
      where: {
        processedAt: { lt: new Date(sevenDaysAgo) }
      }
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);
    const expiredStats = await prisma.postStats.deleteMany({
      where: {
        date: { lt: new Date(thirtyDaysAgo) }
      }
    });

    console.log(`üßπ Small city cleanup: ${expiredPosts.count} posts, ${expiredModeration.count} moderation, ${expiredStats.count} stats`);

    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    this.clearCache();

    return {
      expiredPosts: expiredPosts.count,
      expiredModeration: expiredModeration.count,
      expiredStats: expiredStats.count
    };
  }

  /**
   * –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  static async clusterPostsForSmallCity() {
    const now = Date.now();
    const posts = await prisma.post.findMany({
      where: {
        expiresAt: { gt: now },
        needsModeration: false,
        clusterId: null // –¢–æ–ª—å–∫–æ –Ω–µ–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
      },
      select: {
        id: true,
        latitude: true,
        longitude: true,
        type: true,
        severity: true,
      }
    });

    const clusters: Array<{
      id: string;
      centerLat: number;
      centerLng: number;
      radius: number;
      posts: string[];
      severity: string;
      type: string;
    }> = [];

    const CLUSTER_RADIUS = 200; // 200 –º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞

    for (const post of posts) {
      let addedToCluster = false;

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
      for (const cluster of clusters) {
        const distance = this.calculateDistance(
          post.latitude, post.longitude,
          cluster.centerLat, cluster.centerLng
        );

        if (distance <= CLUSTER_RADIUS && post.type === cluster.type) {
          cluster.posts.push(post.id);
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
          cluster.centerLat = (cluster.centerLat + post.latitude) / 2;
          cluster.centerLng = (cluster.centerLng + post.longitude) / 2;
          addedToCluster = true;
          break;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π
      if (!addedToCluster) {
        clusters.push({
          id: `cluster_${post.id}`,
          centerLat: post.latitude,
          centerLng: post.longitude,
          radius: CLUSTER_RADIUS,
          posts: [post.id],
          severity: post.severity,
          type: post.type
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for (const cluster of clusters) {
      if (cluster.posts.length > 1) {
        await prisma.postCluster.create({
          data: {
            id: cluster.id,
            centerLat: cluster.centerLat,
            centerLng: cluster.centerLng,
            radius: cluster.radius,
            postCount: cluster.posts.length,
            severity: cluster.severity as any,
            type: cluster.type as any,
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å ID –∫–ª–∞—Å—Ç–µ—Ä–∞
        await prisma.post.updateMany({
          where: {
            id: { in: cluster.posts }
          },
          data: {
            clusterId: cluster.id
          }
        });
      }
    }

    console.log(`üîó Created ${clusters.length} clusters for small city`);
    return clusters;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –º–µ—Ç—Ä–∞—Ö)
   */
  private static calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  static getOptimizationRecommendations() {
    return {
      cacheSize: this.cache.size,
      maxCacheSize: 50, // –ú–µ–Ω—å—à–µ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      cityType: 'small',
      recommendations: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞)',
        '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (30 –º–∞–∫—Å–∏–º—É–º)',
        '–ß–∞—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)',
        '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä–∞–¥–∏—É—Å–æ–º 200 –º–µ—Ç—Ä–æ–≤',
        '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
      ],
      performanceTips: [
        '–ö—ç—à–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–µ–π',
        '–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ',
        '–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏'
      ]
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  static async createSmallCityStats() {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å—Ç–∞–º
    const totalPosts = await prisma.post.count({
      where: { expiresAt: { gt: Date.now() } }
    });

    const byType = await prisma.post.groupBy({
      by: ['type'],
      where: { expiresAt: { gt: Date.now() } },
      _count: { type: true }
    });

    const bySeverity = await prisma.post.groupBy({
      by: ['severity'],
      where: { expiresAt: { gt: Date.now() } },
      _count: { severity: true }
    });

    const byModeration = await prisma.post.groupBy({
      by: ['moderationStatus'],
      where: { expiresAt: { gt: Date.now() } },
      _count: { moderationStatus: true }
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await prisma.postStats.create({
      data: {
        date: today,
        totalPosts,
        dpsPosts: byType.find(t => t.type === 'dps')?._count.type || 0,
        patrolPosts: byType.find(t => t.type === 'patrol')?._count.type || 0,
        accidentPosts: byType.find(t => t.type === 'accident')?._count.type || 0,
        cameraPosts: byType.find(t => t.type === 'camera')?._count.type || 0,
        roadworkPosts: byType.find(t => t.type === 'roadwork')?._count.type || 0,
        animalPosts: byType.find(t => t.type === 'animals')?._count.type || 0,
        lowSeverity: bySeverity.find(s => s.severity === 'low')?._count.severity || 0,
        mediumSeverity: bySeverity.find(s => s.severity === 'medium')?._count.severity || 0,
        highSeverity: bySeverity.find(s => s.severity === 'high')?._count.severity || 0,
        pendingModeration: byModeration.find(m => m.moderationStatus === 'PENDING')?._count.moderationStatus || 0,
        approvedPosts: byModeration.find(m => m.moderationStatus === 'APPROVED')?._count.moderationStatus || 0,
        rejectedPosts: byModeration.find(m => m.moderationStatus === 'REJECTED')?._count.moderationStatus || 0,
        aiModerationTime: 0,
        activeUsers: await prisma.user.count(),
        uniqueLocations: await prisma.post.groupBy({
          by: ['latitude', 'longitude'],
          where: { expiresAt: { gt: Date.now() } },
          _count: { latitude: true }
        }).then(result => result.length),
      }
    });

    console.log('‚úÖ Small city stats created');
  }
}
