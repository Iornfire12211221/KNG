/**
 * üß† SMART AI SYSTEM v3.0.0
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è —É–º–Ω–∞—è —Å–∞–º–æ–æ–±—É—á–∞—é—â–∞—è—Å—è –ò–ò-—Å–∏—Å—Ç–µ–º–∞
 * –°–æ–∑–¥–∞–Ω–∞ —Å –Ω—É–ª—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

import { prisma } from './prisma';

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–π –ò–ò-—Å–∏—Å—Ç–µ–º—ã
export interface SmartPost {
  id: string;
  type: string;
  description: string;
  severity: string;
  hasPhoto: boolean;
  photo?: string;
  location?: string;
  userId: string;
  userName: string;
  timestamp: number;
}

export interface SmartDecision {
  decision: 'APPROVED' | 'REJECTED' | 'FLAGGED';
  confidence: number;
  reasoning: string;
  factors: {
    toxicity: number;
    relevance: number;
    quality: number;
    context: number;
    image: number;
  };
  patterns: string[];
  learningData: {
    timeOfDay: string;
    season: string;
    postType: string;
    hasPhoto: boolean;
    descriptionLength: string;
    keywords: string[];
  };
}

export interface LearningPattern {
  id: string;
  type: 'time' | 'type' | 'photo' | 'keyword' | 'context' | 'quality';
  value: string;
  accuracy: number;
  confidence: number;
  samples: number;
  lastUpdated: number;
}

export interface SmartModel {
  version: string;
  intelligence: number; // 0-100
  accuracy: number;
  totalDecisions: number;
  correctDecisions: number;
  patterns: LearningPattern[];
  weights: {
    toxicity: number;
    relevance: number;
    quality: number;
    context: number;
    image: number;
  };
  thresholds: {
    approve: number;
    reject: number;
    moderate: number;
  };
  lastTraining: number;
}

export class SmartAISystem {
  private static instance: SmartAISystem;
  private model: SmartModel;
  private patterns: Map<string, LearningPattern> = new Map();
  private cache: Map<string, { decision: SmartDecision; timestamp: number }> = new Map();
  
  private constructor() {
    this.model = this.initializeModel();
  }

  public static getInstance(): SmartAISystem {
    if (!SmartAISystem.instance) {
      SmartAISystem.instance = new SmartAISystem();
    }
    return SmartAISystem.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–π –º–æ–¥–µ–ª–∏
   */
  private initializeModel(): SmartModel {
    return {
      version: '3.0.0',
      intelligence: 0,
      accuracy: 0,
      totalDecisions: 0,
      correctDecisions: 0,
      patterns: [],
      weights: {
        toxicity: 0.40,  // –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        relevance: 0.35, // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å - –≤—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        quality: 0.10,   // –ö–∞—á–µ—Å—Ç–≤–æ - –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ (–¥–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã –ø–æ–ª–µ–∑–Ω—ã)
        context: 0.10,   // –ö–æ–Ω—Ç–µ–∫—Å—Ç - –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ
        image: 0.05      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ
      },
      thresholds: {
        approve: 0.50,   // –û–¥–æ–±—Ä—è–µ–º –ø–æ—Å—Ç—ã —Å score >= 0.5 (–±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω–æ)
        reject: 0.10,    // –û—Ç–∫–ª–æ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –ø–ª–æ—Ö–∏–µ –ø–æ—Å—Ç—ã (score <= 0.1)
        moderate: 0.30   // –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã (0.1 < score < 0.5)
      },
      lastTraining: Date.now()
    };
  }

  /**
   * üß† –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
   */
  public async moderatePost(post: SmartPost): Promise<SmartDecision> {
    console.log('üß† SMART AI v3.0.0 analyzing post:', post.type);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = this.generateCacheKey(post);
      const cached = this.cache.get(cacheKey);
      if (cached && Date.now() - cached.timestamp < 300000) { // 5 –º–∏–Ω—É—Ç –∫—ç—à
        console.log('üéØ Cache hit for smart AI');
        return cached.decision;
      }

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const learningData = this.extractLearningData(post);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      const factors = await this.analyzeFactors(post, learningData);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const patternAdjustments = await this.applySmartPatterns(learningData);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
      const finalScore = this.calculateFinalScore(factors, patternAdjustments);
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
      const decision = this.makeSmartDecision(finalScore, factors, learningData);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, { decision, timestamp: Date.now() });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await this.recordDecision(post, decision);
      
      console.log('üß† SMART AI Decision:', {
        decision: decision.decision,
        confidence: (decision.confidence * 100).toFixed(1) + '%',
        intelligence: this.model.intelligence
      });
      
      return decision;
      
    } catch (error) {
      console.error('‚ùå Smart AI error:', error);
      return this.getFallbackDecision(post);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  private extractLearningData(post: SmartPost) {
    const now = new Date();
    const hour = now.getHours();
    const month = now.getMonth() + 1;
    
    return {
      timeOfDay: hour >= 6 && hour < 12 ? 'morning' : 
                 hour >= 12 && hour < 18 ? 'day' : 
                 hour >= 18 && hour < 22 ? 'evening' : 'night',
      season: month >= 3 && month <= 5 ? 'spring' : 
              month >= 6 && month <= 8 ? 'summer' : 
              month >= 9 && month <= 11 ? 'autumn' : 'winter',
      postType: post.type,
      hasPhoto: post.hasPhoto,
      descriptionLength: this.getDescriptionLengthCategory(post.description),
      keywords: this.extractKeywords(post.description)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞
   */
  private async analyzeFactors(post: SmartPost, learningData: any) {
    const factors = {
      toxicity: await this.analyzeToxicity(post.description),
      relevance: await this.analyzeRelevance(post, learningData),
      quality: await this.analyzeQuality(post, learningData),
      context: await this.analyzeContext(post, learningData),
      image: await this.analyzeImage(post)
    };

    console.log('üìä Factors analysis:', factors);
    return factors;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
   */
  private async analyzeToxicity(description: string): Promise<number> {
    const toxicWords = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '–º–∞—Ç', '—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ'];
    const text = description.toLowerCase();
    
    let toxicityScore = 0;
    toxicWords.forEach(word => {
      if (text.includes(word)) toxicityScore += 0.5; // –ë–æ–ª—å—à–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (—Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø–∞–º–æ–º)
    if (description.length > 500) toxicityScore += 0.2; // –£–≤–µ–ª–∏—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ
    
    return Math.min(toxicityScore, 1.0);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private async analyzeRelevance(post: SmartPost, learningData: any): Promise<number> {
    const roadKeywords = [
      '–¥–ø—Å', '–¥—Ç–ø', '–∫–∞–º–µ—Ä–∞', '—Ä–µ–º–æ–Ω—Ç', '–¥–æ—Ä–æ–≥', '–ø–∞—Ç—Ä—É–ª—å', '–ø—Ä–æ–±–∫', 
      '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–æ–±—ä–µ–∑–¥', '–∑–Ω–∞–∫', '–º–∞—à–∏–Ω', '–∞–≤—Ç–æ', '—Ç—Ä–∞—Å—Å', '—à–æ—Å—Å–µ',
      '—Å—Ç–æ—è—Ç', '—Å–∏–¥—è—Ç', '–µ—Å—Ç—å', '—Ç—É—Ç', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ'
    ];
    
    const text = post.description.toLowerCase();
    let relevanceScore = 0.5; // –ë–∞–∑–æ–≤—ã–π score (–≤—ã—à–µ, —á–µ–º —Ä–∞–Ω—å—à–µ)
    
    roadKeywords.forEach(keyword => {
      if (text.includes(keyword)) relevanceScore += 0.15; // –ë–æ–ª—å—à–∏–π –±–æ–Ω—É—Å
    });
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ñ–æ—Ç–æ
    if (post.hasPhoto) relevanceScore += 0.2;
    
    // –ë–æ–Ω—É—Å –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (post.location && post.location !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å') {
      relevanceScore += 0.1;
    }
    
    return Math.min(relevanceScore, 1.0);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private async analyzeQuality(post: SmartPost, learningData: any): Promise<number> {
    let qualityScore = 0.7; // –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤—ã—à–µ, —á–µ–º —Ä–∞–Ω—å—à–µ)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è (–±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω–æ –∫ –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ—Å—Ç–∞–º)
    if (post.description.length >= 10) {
      qualityScore += 0.2; // –õ—é–±–æ–π –ø–æ—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º >= 10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const usefulWords = ['—Å–µ–π—á–∞—Å', '—Ç–æ–ª—å–∫–æ —á—Ç–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '—Å—Ç–æ—è—Ç', '—Å–∏–¥—è—Ç', '–µ—Å—Ç—å', '—Ç—É—Ç'];
    const text = post.description.toLowerCase();
    usefulWords.forEach(word => {
      if (text.includes(word)) qualityScore += 0.05; // –ú–µ–Ω—å—à–∏–π –±–æ–Ω—É—Å
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –æ–±—ã—á–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ)
    if (learningData.timeOfDay === 'day' || learningData.timeOfDay === 'morning') {
      qualityScore += 0.05; // –ú–µ–Ω—å—à–∏–π –±–æ–Ω—É—Å
    }
    
    return Math.min(qualityScore, 1.0);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private async analyzeContext(post: SmartPost, learningData: any): Promise<number> {
    let contextScore = 0.5;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    const typeKeywords = {
      'roadwork': ['—Ä–µ–º–æ–Ω—Ç', '—Ä–∞–±–æ—Ç–∞', '—Ç–µ—Ö–Ω–∏–∫', '–∞—Å—Ñ–∞–ª—å—Ç', '–¥–æ—Ä–æ–∂–Ω'],
      'dps': ['–¥–ø—Å', '–ø–æ–ª–∏—Ü', '–ø–∞—Ç—Ä—É–ª—å', '–ø–æ—Å—Ç', '—Ä–∞–¥–∞—Ä'],
      'accident': ['–¥—Ç–ø', '–∞–≤–∞—Ä–∏—è', '—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω'],
      'camera': ['–∫–∞–º–µ—Ä–∞', '—Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü', '—Ä–∞–¥–∞—Ä', '–∫–æ–Ω—Ç—Ä–æ–ª'],
      'animals': ['–∂–∏–≤–æ—Ç–Ω', '–ª–æ—Å', '–∫–∞–±–∞–Ω', '—Å–æ–±–∞–∫', '–∫–æ—à–∫']
    };
    
    const keywords = typeKeywords[post.type as keyof typeof typeKeywords] || [];
    const text = post.description.toLowerCase();
    
    keywords.forEach(keyword => {
      if (text.includes(keyword)) contextScore += 0.2;
    });
    
    return Math.min(contextScore, 1.0);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async analyzeImage(post: SmartPost): Promise<number> {
    if (!post.hasPhoto || !post.photo) {
      return 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ
    }
    
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
      return 0.7; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ–±—ã—á–Ω–æ –ø–æ–ª–µ–∑–Ω—ã
    } catch (error) {
      console.error('Image analysis error:', error);
      return 0.5;
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private async applySmartPatterns(learningData: any): Promise<Record<string, number>> {
    const adjustments: Record<string, number> = {};
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
    const patternTypes = ['time', 'type', 'photo', 'keyword', 'context'];
    
    for (const type of patternTypes) {
      const patternKey = this.getPatternKey(type, learningData);
      const pattern = this.patterns.get(patternKey);
      
      if (pattern && pattern.samples >= 5) {
        adjustments[type] = pattern.accuracy;
      } else {
        adjustments[type] = 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      }
    }
    
    return adjustments;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
   */
  private calculateFinalScore(factors: any, patternAdjustments: any): number {
    let totalScore = 0;
    let totalWeight = 0;
    
    // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    Object.keys(factors).forEach(factor => {
      const weight = this.model.weights[factor as keyof typeof this.model.weights];
      const factorScore = factors[factor];
      const patternScore = patternAdjustments[factor] || 0.5;
      
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä –∏ –ø–∞—Ç—Ç–µ—Ä–Ω
      const combinedScore = (factorScore * 0.7) + (patternScore * 0.3);
      
      totalScore += combinedScore * weight;
      totalWeight += weight;
    });
    
    return totalWeight > 0 ? totalScore / totalWeight : 0.5;
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ —É–º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
   */
  private makeSmartDecision(score: number, factors: any, learningData: any): SmartDecision {
    let decision: 'APPROVED' | 'REJECTED' | 'FLAGGED';
    let confidence: number;
    let reasoning: string;
    
    if (score >= this.model.thresholds.approve) {
      decision = 'APPROVED';
      confidence = Math.min(score, 0.95);
      reasoning = '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
    } else if (score <= this.model.thresholds.reject) {
      decision = 'REJECTED';
      confidence = Math.max(1 - score, 0.05);
      reasoning = '–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç';
    } else {
      decision = 'FLAGGED';
      confidence = 0.5;
      reasoning = '–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞';
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    const patterns = this.getRelevantPatterns(learningData);
    
    return {
      decision,
      confidence,
      reasoning,
      factors,
      patterns,
      learningData
    };
  }

  /**
   * –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  private async recordDecision(post: SmartPost, decision: SmartDecision): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await prisma.aIModeration.create({
        data: {
          postId: post.id,
          content: post.description,
          imageUrl: post.photo,
          toxicityScore: decision.factors.toxicity,
          relevanceScore: decision.factors.relevance,
          severityScore: decision.factors.quality,
          categoryScore: decision.factors.context,
          detectedLanguage: 'ru',
          keyPhrases: decision.learningData.keywords,
          entities: [],
          decision: decision.decision === 'APPROVED' ? 'APPROVED' : 
                   decision.decision === 'REJECTED' ? 'REJECTED' : 'PENDING',
          confidence: decision.confidence,
          reasoning: decision.reasoning,
          processedAt: new Date()
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
      this.model.totalDecisions++;
      
    } catch (error) {
      console.error('Error recording decision:', error);
    }
  }

  /**
   * –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
   */
  public async learnFromModerator(postId: string, moderatorDecision: 'APPROVED' | 'REJECTED'): Promise<void> {
    try {
      console.log('üß† Learning from moderator decision:', moderatorDecision);
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ
      const aiDecision = await prisma.aIModeration.findFirst({
        where: { postId }
      });
      
      if (!aiDecision) return;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
      const wasCorrect = aiDecision.decision === moderatorDecision;
      
      if (wasCorrect) {
        this.model.correctDecisions++;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
      this.model.accuracy = this.model.correctDecisions / this.model.totalDecisions;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
      this.model.intelligence = Math.min(this.model.accuracy * 100, 100);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      await this.updatePatterns(aiDecision, wasCorrect);
      
      console.log('üß† Learning completed. Intelligence:', this.model.intelligence.toFixed(1));
      
    } catch (error) {
      console.error('Error learning from moderator:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private async updatePatterns(aiDecision: any, wasCorrect: boolean): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private generateCacheKey(post: SmartPost): string {
    return `${post.type}_${post.hasPhoto}_${post.description.length}_${post.userId}`;
  }

  private getDescriptionLengthCategory(description: string): string {
    const length = description.length;
    if (length === 0) return 'empty';
    if (length < 20) return 'short';
    if (length < 100) return 'medium';
    if (length < 300) return 'long';
    return 'very_long';
  }

  private extractKeywords(description: string): string[] {
    const keywords: string[] = [];
    const text = description.toLowerCase();
    
    const roadKeywords = ['–¥–ø—Å', '–¥—Ç–ø', '–∫–∞–º–µ—Ä–∞', '—Ä–µ–º–æ–Ω—Ç', '–¥–æ—Ä–æ–≥', '–ø–∞—Ç—Ä—É–ª—å'];
    roadKeywords.forEach(keyword => {
      if (text.includes(keyword)) keywords.push(keyword);
    });
    
    return keywords;
  }

  private getPatternKey(type: string, learningData: any): string {
    switch (type) {
      case 'time': return `time_${learningData.timeOfDay}`;
      case 'type': return `type_${learningData.postType}`;
      case 'photo': return `photo_${learningData.hasPhoto}`;
      case 'keyword': return `keyword_${learningData.keywords.join('_')}`;
      case 'context': return `context_${learningData.timeOfDay}_${learningData.postType}`;
      default: return '';
    }
  }

  private getRelevantPatterns(learningData: any): string[] {
    const patterns: string[] = [];
    
    if (learningData.timeOfDay) patterns.push(`time:${learningData.timeOfDay}`);
    if (learningData.postType) patterns.push(`type:${learningData.postType}`);
    if (learningData.hasPhoto) patterns.push('has_photo');
    if (learningData.keywords.length > 0) patterns.push(`keywords:${learningData.keywords.join(',')}`);
    
    return patterns;
  }

  private getFallbackDecision(post: SmartPost): SmartDecision {
    return {
      decision: 'FLAGGED',
      confidence: 0.5,
      reasoning: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
      factors: {
        toxicity: 0.5,
        relevance: 0.5,
        quality: 0.5,
        context: 0.5,
        image: 0.5
      },
      patterns: [],
      learningData: this.extractLearningData(post)
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
   */
  public getModelStats() {
    return {
      version: this.model.version,
      intelligence: this.model.intelligence,
      accuracy: this.model.accuracy,
      totalDecisions: this.model.totalDecisions,
      correctDecisions: this.model.correctDecisions,
      patternsCount: this.patterns.size,
      lastTraining: this.model.lastTraining
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const smartAI = SmartAISystem.getInstance();
